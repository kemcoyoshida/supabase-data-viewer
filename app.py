import streamlit as st
from supabase import create_client, Client
import pandas as pd
from datetime import datetime
import time

# ========================================
# Êé•Á∂öÊÉÖÂ†±„Å®ÂàùÊúüË®≠ÂÆö
# ========================================

# „Åì„Åì„ÅØ„ÅîËá™Ë∫´„ÅÆSupabase URL„Å´ÁΩÆ„ÅçÊèõ„Åà„Å¶„Åè„Å†„Åï„ÅÑ
SUPABASE_URL = "https://uevlguozshzwywzqtsvr.supabase.co"

# secrets.toml„Åã„Çâ„Ç≠„Éº„ÇíÂèñÂæó„Åô„Çã„Åì„Å®„ÇíÊÉ≥ÂÆö
if "SUPABASE_KEY" in st.secrets:
    SUPABASE_KEY = st.secrets["SUPABASE_KEY"]
else:
    SUPABASE_KEY = None
    st.error("üö® Êé•Á∂ö„Ç≠„Éº„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ`st.secrets`„Å´`SUPABASE_KEY`„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
    st.stop()

# Supabase„ÇØ„É©„Ç§„Ç¢„É≥„Éà‰ΩúÊàê
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# „Çª„ÉÉ„Ç∑„Éß„É≥Áä∂ÊÖã„ÅÆÂàùÊúüÂåñ
if 'conditions' not in st.session_state:
    st.session_state.conditions = []
if 'selected_table' not in st.session_state:
    st.session_state.selected_table = None
if 'current_data' not in st.session_state:
    st.session_state.current_data = None
if 'last_mode' not in st.session_state:
    st.session_state.last_mode = None
if 'last_search_executed' not in st.session_state:
    st.session_state.last_search_executed = False

# ========================================
# „É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£Èñ¢Êï∞
# ========================================

@st.cache_data(ttl=300)
def get_table_structure(table_name: str):
    """„ÉÜ„Éº„Éñ„É´„ÅÆÊßãÈÄ†ÔºàÂàóÂêç„Å®„Éá„Éº„ÇøÂûãÔºâ„ÇíÂèñÂæó"""
    try:
        # ÊßãÈÄ†„ÇíÊääÊè°„Åô„Çã„Åü„ÇÅ„ÄÅ„Éá„Éº„Çø„Åå„Å™„Åè„Å¶„ÇÇÂàóÊÉÖÂ†±„ÅåÂèñ„Çå„Çã„Çà„ÅÜÂ∞ë„ÅóÂ∑•Â§´
        response = supabase.rpc('get_table_columns', {'table_name': table_name}).execute()
        
        # NOTE: get_table_columns RPC„ÅåÁî®ÊÑè„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑSupabaseÁí∞Â¢É„Åß„ÅØÂ§±Êïó„Åô„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô
        # „Åù„ÅÆÂ†¥Âêà„ÅØ„ÄÅ‰ª•Ââç„ÅÆ„ÄåLIMIT 1„Åß„Éá„Éº„ÇøÂûã„ÇíÊé®Ê∏¨„Äç„É≠„Ç∏„ÉÉ„ÇØ„Å´Êàª„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
        if response.data:
            columns = {}
            for col in response.data:
                # Á∞°ÊòìÁöÑ„Å™Âûã„Éû„ÉÉ„Éî„É≥„Ç∞
                pg_type = col.get('data_type', 'text')
                if pg_type in ['integer', 'smallint', 'bigint', 'numeric']:
                    columns[col['column_name']] = 'integer'
                elif pg_type in ['double precision', 'real']:
                    columns[col['column_name']] = 'number'
                elif pg_type == 'boolean':
                    columns[col['column_name']] = 'boolean'
                elif pg_type in ['timestamp with time zone', 'timestamp without time zone', 'date']:
                    columns[col['column_name']] = 'datetime'
                else:
                    columns[col['column_name']] = 'text'
            return columns
            
        # RPCÂ§±ÊïóÊôÇ„ÄÅLIMIT 1„Åß„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
        response = supabase.table(table_name).select("*").limit(1).execute()
        if response.data and len(response.data) > 0:
            sample_data = response.data[0]
            columns = {}
            for key, value in sample_data.items():
                if isinstance(value, bool):
                    columns[key] = 'boolean'
                elif isinstance(value, int):
                    columns[key] = 'integer'
                elif isinstance(value, float):
                    columns[key] = 'number'
                elif isinstance(value, str):
                    if 'date' in key.lower() or 'time' in key.lower() or 'at' in key.lower() or (len(value) > 10 and '-' in value and 'T' in value):
                        columns[key] = 'datetime'
                    else:
                        columns[key] = 'text'
                else:
                    columns[key] = 'text' 
            return columns
        return {}
    except Exception:
        # ÊßãÈÄ†„ÅåÂèñ„Çå„Å™„ÅÑÂ†¥Âêà„ÅØÁ©∫„ÅÆËæûÊõ∏„ÇíËøî„Åô
        return {}


@st.cache_data(ttl=300)
def get_all_tables_cached():
    """„ÉÜ„Éº„Éñ„É´‰∏ÄË¶ß„Çí pg_tables „Åã„ÇâÂèñÂæó„Åó„ÄÅ„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÊäëÂà∂„Åô„Çã"""
    fallback_table = 't_machinecode'
    
    try:
        # ÊàêÂäüÂÆüÁ∏æ„ÅÆ„ÅÇ„Çã pg_tables „Åã„Çâ„ÉÜ„Éº„Éñ„É´‰∏ÄË¶ß„ÇíÂèñÂæó
        response = supabase.from_('pg_tables').select('tablename').eq('schemaname', 'public').execute()
        
        if response.data:
            system_tables_to_exclude = ['supabase_migrations', 'users', 'roles', 'pg_stat_statements']
            tables = sorted([
                table['tablename']
                for table in response.data
                if table['tablename'] not in system_tables_to_exclude and not table['tablename'].startswith('rls_')
            ])
            
            if tables:
                return tables
        
        # pg_tables„Åã„Çâ„ÅÆ„Éá„Éº„Çø„ÅåÁ©∫„ÅÆÂ†¥Âêà„ÄÅ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„ÉÜ„Éº„Éñ„É´„ÅÆÊßãÈÄ†„ÅåÂèñ„Çå„Çå„Å∞Âê´„ÇÅ„Çã
        if get_table_structure(fallback_table):
            return [fallback_table]
        return []
    
    except Exception:
        # „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Å¶„ÇÇ st.error() „ÇíÂëº„Å∞„Åö„ÄÅÈùô„Åã„Å´„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂá¶ÁêÜ„ÇíË°å„ÅÜ
        if get_table_structure(fallback_table):
            return [fallback_table]
        return []

def build_query_with_conditions(table_name: str, conditions: list, order_by: str, order_direction: str, limit: int):
    """Êù°‰ª∂„Åã„Çâ„ÇØ„Ç®„É™„Å®SQLÊñá„ÇíÊßãÁØâ"""
    # ... („Åì„ÅÆÈñ¢Êï∞„ÅØÂ§âÊõ¥„Å™„Åó„ÄÇ‰ª•Ââç„ÅÆ„É≠„Ç∏„ÉÉ„ÇØ„Çí„Åù„ÅÆ„Åæ„Åæ‰ΩøÁî®) ...
    query = supabase.table(table_name).select("*")
    sql_parts = [f"SELECT * FROM {table_name}"]
    where_clauses = []
    
    for cond in conditions:
        column = cond['column']
        operator = cond['operator']
        value = cond['value']
        
        if operator == "Âê´„ÇÄ":
            query = query.ilike(column, f"%{value}%")
            where_clauses.append(f"{column} ILIKE '%{value}%'")
        elif operator == "Á≠â„Åó„ÅÑ":
            query = query.eq(column, value)
            where_clauses.append(f"{column} = '{value}'")
        elif operator == "Âê´„Åæ„Å™„ÅÑ":
            query = query.not_.ilike(column, f"%{value}%")
            where_clauses.append(f"{column} NOT ILIKE '%{value}%'")
        elif operator == "‰ª•‰∏ä":
            query = query.gte(column, value)
            where_clauses.append(f"{column} >= {value}")
        elif operator == "‰ª•‰∏ã":
            query = query.lte(column, value)
            where_clauses.append(f"{column} <= {value}")
        elif operator == "„Çà„ÇäÂ§ß„Åç„ÅÑ":
            query = query.gt(column, value)
            where_clauses.append(f"{column} > {value}")
        elif operator == "„Çà„ÇäÂ∞è„Åï„ÅÑ":
            query = query.lt(column, value)
            where_clauses.append(f"{column} < {value}")
        elif operator == "Á©∫„Åß„Å™„ÅÑ":
            query = query.not_.is_('null', column)
            where_clauses.append(f"{column} IS NOT NULL")
        elif operator == "Á©∫":
            query = query.is_('null', column)
            where_clauses.append(f"{column} IS NULL")

    if where_clauses:
        sql_parts.append("WHERE " + " AND ".join(where_clauses))
    
    if order_by and order_by != "„Å™„Åó":
        asc = order_direction == "ÊòáÈ†Ü"
        query = query.order(order_by, desc=not asc)
        direction = "ASC" if asc else "DESC"
        sql_parts.append(f"ORDER BY {order_by} {direction}")
    
    query = query.limit(limit)
    sql_parts.append(f"LIMIT {limit}")
    
    sql_text = "\n".join(sql_parts)
    return query, sql_text

def execute_query(query):
    """„ÇØ„Ç®„É™„ÇíÂÆüË°å„Åó„ÄÅDataFrame„ÇíËøî„Åô"""
    try:
        response = query.execute()
        if response.data:
            df = pd.DataFrame(response.data)
            for col in df.columns:
                # Êó•‰ªò/ÊôÇÂàªÂûã„ÅÆÂ§âÊèõ„ÇíÂº∑Âåñ
                if 'date' in col.lower() or 'time' in col.lower() or 'at' in col.lower():
                    try:
                        # „Çø„Ç§„É†„Çæ„Éº„É≥ÊÉÖÂ†±„ÇíËÄÉÊÖÆ„Åó„Å¶Â§âÊèõ
                        df[col] = pd.to_datetime(df[col], utc=True)
                    except:
                        pass
            return df
        return pd.DataFrame()
    except Exception as e:
        st.error(f"‚ùå „ÇØ„Ç®„É™ÂÆüË°å„Ç®„É©„Éº: {e}")
        return None

def insert_data(table_name: str, data: dict):
    """„Éá„Éº„Çø„ÇíËøΩÂä†"""
    try:
        response = supabase.table(table_name).insert(data).execute()
        return True, "‚úÖ „Éá„Éº„Çø„ÇíËøΩÂä†„Åó„Åæ„Åó„ÅüÔºÅ", response
    except Exception as e:
        return False, f"‚ùå „Ç®„É©„Éº: {e}", None

def update_data(table_name: str, row_id: any, data: dict, id_column: str = 'id'):
    """„Éá„Éº„Çø„ÇíÊõ¥Êñ∞"""
    try:
        response = supabase.table(table_name).update(data).eq(id_column, row_id).execute()
        return True, "‚úÖ „Éá„Éº„Çø„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„ÅüÔºÅ", response
    except Exception as e:
        return False, f"‚ùå „Ç®„É©„Éº: {e}", None

def delete_data(table_name: str, row_id: any, id_column: str = 'id'):
    """„Éá„Éº„Çø„ÇíÂâäÈô§"""
    try:
        response = supabase.table(table_name).delete().eq(id_column, row_id).execute()
        return True, "‚úÖ „Éá„Éº„Çø„ÇíÂâäÈô§„Åó„Åæ„Åó„ÅüÔºÅ", response
    except Exception as e:
        return False, f"‚ùå „Ç®„É©„Éº: {e}", None

# ========================================
# UIÊßãÁØâ
# ========================================

st.set_page_config(page_title="Supabase CRUD„Éû„Éç„Éº„Ç∏„É£„Éº", layout="wide", page_icon="üóÑÔ∏è")

st.title("Supabase üóÑÔ∏è")
st.caption("„ÉÜ„Éº„Éñ„É´ÁÆ°ÁêÜÔºà‰ΩúÊàê„ÉªÂâäÈô§ÔºâÊ©üËÉΩ„ÅØ„ÄÅ„Éá„Éº„ÇøÊï¥ÂêàÊÄß„Å®ÂÆâÂÖ®ÊÄß„ÅÆË¶≥ÁÇπ„Åã„ÇâÈô§Â§ñ„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ")

# ---

## üéõÔ∏è „Çµ„Ç§„Éâ„Éê„Éº„Å®„ÉÜ„Éº„Éñ„É´ÈÅ∏Êäû

st.sidebar.header("üéõÔ∏è Êìç‰Ωú„É°„Éã„É•„Éº")

# „É¢„Éº„ÉâÈÅ∏Êäû
mode = st.sidebar.radio(
    "Êìç‰Ωú„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
    ["üìä Ê§úÁ¥¢„ÉªÈñ≤Ë¶ß", "‚ûï „Éá„Éº„Çø„ÅÆÊñ∞Ë¶èËøΩÂä†", "‚úèÔ∏è „Éá„Éº„Çø„ÅÆÁ∑®ÈõÜ", "üóëÔ∏è „Éá„Éº„Çø„ÅÆÂâäÈô§"],
    key="app_mode"
)

# „É¢„Éº„Éâ„ÅåÂ§â„Çè„Å£„Åü„Çâ„Çª„ÉÉ„Ç∑„Éß„É≥Áä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
if st.session_state.last_mode != mode:
    st.session_state.current_data = None
    st.session_state.conditions = []
    st.session_state.last_search_executed = False
    st.session_state.last_mode = mode

st.sidebar.markdown("---")

# „ÉÜ„Éº„Éñ„É´ÈÅ∏Êäû
st.sidebar.subheader("üìÅ ÂØæË±°„ÉÜ„Éº„Éñ„É´")

with st.spinner("„ÉÜ„Éº„Éñ„É´‰∏ÄË¶ß„ÇíË™≠„ÅøËæº„Åø‰∏≠..."):
    tables = get_all_tables_cached()

# „ÉÜ„Éº„Éñ„É´„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØ„Ç®„É©„Éº„ÅßÂÅúÊ≠¢
if not tables:
    st.sidebar.error("‚ö†Ô∏è „Éá„Éº„Çø„Éô„Éº„Çπ„Å´„ÉÜ„Éº„Éñ„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇSupabase„Ç≥„É≥„ÇΩ„Éº„É´„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
    st.stop()
    
# „Éá„Éï„Ç©„É´„ÉàÈÅ∏Êäû„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„ÅÆÊ±∫ÂÆö
default_table_name = 't_machinecode'
default_index = 0
if st.session_state.selected_table in tables:
    default_index = tables.index(st.session_state.selected_table)
elif default_table_name in tables:
    default_index = tables.index(default_table_name)
    
selected_table = st.sidebar.selectbox(
    "„ÉÜ„Éº„Éñ„É´Âêç",
    tables,
    index=default_index,
    key="table_selector",
    help="Êìç‰Ωú„Åó„Åü„ÅÑ„ÉÜ„Éº„Éñ„É´„ÇíÈÅ∏„Çì„Åß„Åè„Å†„Åï„ÅÑ"
)

# „ÉÜ„Éº„Éñ„É´„ÅåÂ§â„Çè„Å£„Åü„Çâ„Çª„ÉÉ„Ç∑„Éß„É≥„Çí„É™„Çª„ÉÉ„Éà
if st.session_state.selected_table != selected_table:
    st.session_state.selected_table = selected_table
    st.session_state.conditions = []
    st.session_state.current_data = None
    st.session_state.last_search_executed = False
    st.rerun()

# „ÉÜ„Éº„Éñ„É´ÊßãÈÄ†„ÇíÂèñÂæó
table_columns = get_table_structure(selected_table)

if not table_columns:
    st.sidebar.error(f"‚ùå `{selected_table}` „ÅÆ„ÉÜ„Éº„Éñ„É´ÊßãÈÄ†„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„ÄÇ„Éá„Éº„Çø„ÅåÂ≠òÂú®„Åó„Å™„ÅÑ„Åã„ÄÅ„Ç≠„Éº„ÅÆÊ®©Èôê„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ")
    column_names = []
else:
    column_names = list(table_columns.keys())
    st.sidebar.caption(f"‚úÖ **`{selected_table}`** „ÅØ{len(column_names)}Âàó„ÅÆ„ÉÜ„Éº„Éñ„É´„Åß„Åô„ÄÇ")

# ---

## üìä Ê§úÁ¥¢„ÉªÈñ≤Ë¶ß„É¢„Éº„Éâ

if mode == "üìä Ê§úÁ¥¢„ÉªÈñ≤Ë¶ß":
    
    st.subheader(f"üìä `{selected_table}` „ÅÆ„Éá„Éº„ÇøÊ§úÁ¥¢„ÉªÈñ≤Ë¶ß")
    
    st.sidebar.markdown("---")
    st.sidebar.subheader("üîç „Éï„Ç£„É´„Çø„É™„É≥„Ç∞Êù°‰ª∂")
    
    # --- Êù°‰ª∂Ë®≠ÂÆö UI ---
    with st.sidebar.expander("‚ûï Êñ∞„Åó„ÅÑÊù°‰ª∂„ÇíËøΩÂä†", expanded=len(st.session_state.conditions) == 0):
        if not column_names:
            st.warning("„ÉÜ„Éº„Éñ„É´„ÅÆÂàóÊÉÖÂ†±„ÅåÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ")
        else:
            new_column = st.selectbox("ÂàóÂêç", column_names, key="search_col")
            col_type = table_columns.get(new_column, 'text')
            
            if col_type in ['integer', 'number']:
                operators = ["Á≠â„Åó„ÅÑ", "‰ª•‰∏ä", "‰ª•‰∏ã", "„Çà„ÇäÂ§ß„Åç„ÅÑ", "„Çà„ÇäÂ∞è„Åï„ÅÑ", "Á©∫„Åß„Å™„ÅÑ", "Á©∫"]
            elif col_type == 'boolean':
                operators = ["Á≠â„Åó„ÅÑ", "Á©∫„Åß„Å™„ÅÑ", "Á©∫"]
            else:
                operators = ["Âê´„ÇÄ", "Á≠â„Åó„ÅÑ", "Âê´„Åæ„Å™„ÅÑ", "Á©∫„Åß„Å™„ÅÑ", "Á©∫"]
            
            new_operator = st.selectbox("ÊºîÁÆóÂ≠ê", operators, key="search_op")
            
            new_value = None
            if new_operator not in ["Á©∫„Åß„Å™„ÅÑ", "Á©∫"]:
                if col_type == 'boolean':
                    new_value = st.selectbox("ÂÄ§", [True, False], format_func=lambda x: "True" if x else "False", key="search_val")
                elif col_type == 'integer':
                    new_value = st.number_input("ÂÄ§ (Êï¥Êï∞)", value=None, step=1, key="search_val_int", format="%d")
                elif col_type == 'number':
                    new_value = st.number_input("ÂÄ§ (Â∞èÊï∞)", value=None, step=0.01, format="%.2f", key="search_val_float")
                elif col_type == 'datetime':
                    # Êó•‰ªòÂÖ•Âäõ„ÅØ datetime.dateÂûã„ÅßÂèñÂæó
                    new_value = st.date_input("Êó•‰ªò", value="today", key="search_val_date")
                else:
                    new_value = st.text_input("ÂÄ§ („ÉÜ„Ç≠„Çπ„Éà)", key="search_val_text")
            
            col_a, col_b = st.columns(2)
            with col_a:
                if st.button("‚ûï „Åì„ÅÆÊù°‰ª∂„ÇíËøΩÂä†", use_container_width=True, key="add_condition_btn"):
                    if new_operator in ["Á©∫„Åß„Å™„ÅÑ", "Á©∫"] or (new_value is not None and new_value != ""):
                        # Êó•‰ªò„ÇÑ„Éñ„Éº„É´ÂÄ§„ÅØÊñáÂ≠óÂàó„Å´Â§âÊèõ„Åó„Å¶‰øùÂ≠ò
                        st.session_state.conditions.append({
                            'column': new_column,
                            'operator': new_operator,
                            'value': str(new_value) if new_value is not None else ""
                        })
                        st.session_state.last_search_executed = False # Êù°‰ª∂Â§âÊõ¥ÊôÇ„ÅØÂÜçÊ§úÁ¥¢„ÅåÂøÖË¶Å
                        st.rerun()
                    else:
                        st.warning("ÂÄ§„ÇíÂÖ•Âäõ„Åô„Çã„Åã„ÄÅÁ©∫/Á©∫„Åß„Å™„ÅÑ„ÅÆÊºîÁÆóÂ≠ê„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
            
            with col_b:
                if st.button("üóëÔ∏è ÂÖ®Êù°‰ª∂„ÇíÂâäÈô§", use_container_width=True, key="clear_conditions_btn"):
                    st.session_state.conditions = []
                    st.session_state.last_search_executed = False
                    st.rerun()

    # ÁèæÂú®„ÅÆÊù°‰ª∂„ÇíË°®Á§∫
    if st.session_state.conditions:
        st.sidebar.markdown("**üìã ÁèæÂú®ÈÅ©Áî®‰∏≠„ÅÆ„Éï„Ç£„É´„Çø:**")
        for idx, cond in enumerate(st.session_state.conditions):
            col1, col2 = st.sidebar.columns([5, 1])
            with col1:
                display_value = f"'{cond['value']}'" if cond['value'] else ""
                st.caption(f"**{cond['column']}** *{cond['operator']}* {display_value}")
            with col2:
                if st.button("‚ùå", key=f"del_{idx}"):
                    st.session_state.conditions.pop(idx)
                    st.session_state.last_search_executed = False
                    st.rerun()
    
    st.sidebar.markdown("---")
    st.sidebar.subheader("üìã ‰∏¶„Å≥Êõø„Åà„Å®‰ª∂Êï∞")
    
    order_by = st.sidebar.selectbox("‰∏¶„Å≥Êõø„Åà„ÇãÂàó", ["„Å™„Åó"] + column_names)
    order_direction = st.sidebar.radio("È†ÜÂ∫è", ["ÊòáÈ†ÜÔºàA‚ÜíZÔºâ", "ÈôçÈ†ÜÔºàZ‚ÜíAÔºâ"])
    order_direction = "ÊòáÈ†Ü" if "ÊòáÈ†Ü" in order_direction else "ÈôçÈ†Ü"
    if order_by == "„Å™„Åó": order_by = None
    
    limit = st.sidebar.slider("üìä ÊúÄÂ§ßË°®Á§∫‰ª∂Êï∞", 10, 1000, 100, step=10)
    
    st.sidebar.markdown("---")
    
    search_button = st.sidebar.button("üöÄ Ê§úÁ¥¢ÂÆüË°å", type="primary", use_container_width=True, key="main_search_btn")
    
    # „É°„Ç§„É≥„Ç®„É™„Ç¢
    if search_button or st.session_state.last_search_executed:
        
        query, sql_text = build_query_with_conditions(selected_table, st.session_state.conditions, order_by, order_direction, limit)
        
        with st.spinner("üì• „Éá„Éº„Çø„ÇíÂèñÂæó‰∏≠..."):
            df = execute_query(query)
            st.session_state.last_search_executed = True # Ê§úÁ¥¢ÂÆüË°å„Éï„É©„Ç∞„ÇíÁ´ã„Å¶„Çã

        with st.expander("üí° ÁîüÊàê„Åï„Çå„ÅüSQLÊñá"):
            st.code(sql_text, language="sql")
        
        if df is not None and len(df) > 0:
            st.session_state.current_data = df # Ê§úÁ¥¢ÁµêÊûú„Çí„Çª„ÉÉ„Ç∑„Éß„É≥„Å´‰øùÂ≠ò
            st.metric("üìä ÂèñÂæó‰ª∂Êï∞", f"{len(df):,} ‰ª∂")
            st.markdown("---")
            st.subheader(f"üìã Ê§úÁ¥¢ÁµêÊûúÔºö`{selected_table}`")
            st.dataframe(df, use_container_width=True, height=400)
            
            csv = df.to_csv(index=False).encode('utf-8-sig')
            st.download_button("üì• CSV„Åß„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ", csv, f"{selected_table}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv", "text/csv", use_container_width=True)
            
        elif df is not None:
            st.session_state.current_data = pd.DataFrame() # „Éá„Éº„Çø„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÇÇ„ÇØ„É™„Ç¢
            st.warning("‚ö†Ô∏è Êù°‰ª∂„Å´‰∏ÄËá¥„Åô„Çã„Éá„Éº„Çø„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü")
        else:
            st.session_state.current_data = None
            st.error("‚ùå „Éá„Éº„ÇøÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")
    
    else:
        st.info("üëà Â∑¶„ÅÆ„Çµ„Ç§„Éâ„Éê„Éº„ÅßÊù°‰ª∂„ÇíË®≠ÂÆö„Åó„ÄÅ„ÄåüöÄ Ê§úÁ¥¢ÂÆüË°å„Äç„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")

# ---

## ‚ûï „Éá„Éº„Çø„ÅÆÊñ∞Ë¶èËøΩÂä†„É¢„Éº„Éâ

elif mode == "‚ûï „Éá„Éº„Çø„ÅÆÊñ∞Ë¶èËøΩÂä†":
    
    st.subheader(f"‚ûï `{selected_table}` „Å´Êñ∞„Åó„ÅÑ„Éá„Éº„Çø„ÇíËøΩÂä†")
    st.markdown("**‰ª•‰∏ã„ÅÆ„Éï„Ç©„Éº„É†„Å´ÂøÖË¶Å„Å™ÊÉÖÂ†±„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ**")
    
    with st.form("add_form"):
        new_data = {}
        cols = st.columns(2)
        
        for idx, (col_name, col_type) in enumerate(table_columns.items()):
            with cols[idx % 2]:
                
                is_primary_key_candidate = col_name.lower() == 'id'
                if is_primary_key_candidate and col_type == 'integer':
                    st.caption(f"üîë **{col_name}**ÔºàËá™ÂãïÊé°Áï™„ÇíÊÉ≥ÂÆö„Åó„Çπ„Ç≠„ÉÉ„ÉóÔºâ")
                    continue
                
                is_timestamp_column = col_name.lower() in ['created_at', 'updated_at']
                if is_timestamp_column:
                    st.caption(f"üïê **{col_name}**ÔºàËá™ÂãïË®≠ÂÆö„ÇíÊÉ≥ÂÆö„Åó„Çπ„Ç≠„ÉÉ„ÉóÔºâ")
                    continue
                
                # ÂÖ•Âäõ„Ç¶„Ç£„Ç∏„Çß„ÉÉ„Éà„ÅÆÊîπÂñÑ
                if col_type == 'boolean':
                    new_data[col_name] = st.checkbox(f"**{col_name}**", key=f"add_{col_name}", value=False)
                elif col_type == 'integer':
                    new_data[col_name] = st.number_input(f"**{col_name}** (Êï¥Êï∞)", value=None, step=1, key=f"add_{col_name}_int", format="%d")
                elif col_type == 'number':
                    new_data[col_name] = st.number_input(f"**{col_name}** (Â∞èÊï∞)", value=None, step=0.01, format="%.2f", key=f"add_{col_name}_float")
                elif col_type == 'datetime':
                    # Êó•‰ªò„Å®ÊôÇÂàª„ÇíÂàÜÈõ¢„Åó„Å¶ÂÖ•Âäõ„Åó„ÄÅÁµêÂêà
                    col_date, col_time = st.columns(2)
                    with col_date:
                        date_val = st.date_input(f"**{col_name}** (Êó•‰ªò)", key=f"add_{col_name}_date", value=datetime.today().date())
                    with col_time:
                        time_val = st.time_input(f"**{col_name}** (ÊôÇÂàª)", key=f"add_{col_name}_time", value=datetime.now().time())
                    # PostgreSQL„ÅÆ„Çø„Ç§„É†„Çπ„Çø„É≥„ÉóÂΩ¢Âºè„Å´ÁµêÂêà
                    new_data[col_name] = f"{date_val} {time_val}"
                else:
                    new_data[col_name] = st.text_input(f"**{col_name}** („ÉÜ„Ç≠„Çπ„Éà)", key=f"add_{col_name}_text")
        
        st.markdown("---")
        submitted = st.form_submit_button("‚úÖ „Éá„Éº„Çø„ÇíËøΩÂä†„Åô„Çã", type="primary", use_container_width=True)
        
        if submitted:
            # None„ÇÑÁ©∫ÊñáÂ≠óÂàó„ÇíÈô§Â§ñ
            filtered_data = {k: v for k, v in new_data.items() if v is not None and v != "" and k not in ['created_at', 'updated_at']}
            
            if filtered_data:
                success, message, response = insert_data(selected_table, filtered_data)
                
                if success:
                    st.success(message)
                    st.balloons()
                    st.session_state.last_search_executed = False # „Éá„Éº„Çø„Çí„É™„Éï„É¨„ÉÉ„Ç∑„É•„Åï„Åõ„Çã
                    time.sleep(1) # „É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫„ÅÆ„Åü„ÇÅÂ∞ë„ÅóÂæÖ„Å§
                    st.rerun() # Âç≥ÊôÇÂèçÊò†
                else:
                    st.error(message)
            else:
                st.warning("‚ö†Ô∏è Â∞ë„Å™„Åè„Å®„ÇÇ1„Å§„ÅÆÈ†ÖÁõÆ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ")

# ---

## ‚úèÔ∏è „Éá„Éº„Çø„ÅÆÁ∑®ÈõÜ„É¢„Éº„Éâ

elif mode == "‚úèÔ∏è „Éá„Éº„Çø„ÅÆÁ∑®ÈõÜ":
    
    st.subheader(f"‚úèÔ∏è `{selected_table}` „ÅÆ„Éá„Éº„Çø„ÇíÁ∑®ÈõÜ")
    
    id_column = 'id' if 'id' in column_names else (column_names[0] if column_names else None)
    if not id_column:
        st.error("„ÉÜ„Éº„Éñ„É´„Å´Âàó„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ")
        st.stop()
        
    st.markdown("#### „Çπ„ÉÜ„ÉÉ„Éó1: Á∑®ÈõÜ„Åô„Çã„Éá„Éº„Çø„ÇíË¶ã„Å§„Åë„Çã")
    
    col_a, col_b, col_c = st.columns([3, 3, 1])
    with col_a:
        search_col = st.selectbox("Ê§úÁ¥¢„Åô„ÇãÂàó", column_names, key="edit_search_col")
    with col_b:
        search_val = st.text_input("Ê§úÁ¥¢„Ç≠„Éº„ÉØ„Éº„Éâ", placeholder="‰æã: ABC123 „Åæ„Åü„ÅØ 2024", key="edit_search_val")
    with col_c:
        st.markdown("<br>", unsafe_allow_html=True)
        if st.button("üîç Ê§úÁ¥¢", type="primary", key="edit_search_btn", use_container_width=True):
            if search_val:
                query = supabase.table(selected_table).select("*").ilike(search_col, f"%{search_val}%").limit(20)
                df = execute_query(query)
                
                if df is not None and len(df) > 0:
                    st.session_state.current_data = df
                    st.success(f"‚úÖ {len(df)}‰ª∂Ë¶ã„Å§„Åã„Çä„Åæ„Åó„Åü„ÄÇ")
                else:
                    st.session_state.current_data = None
                    st.warning("‚ö†Ô∏è „Éá„Éº„Çø„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ")
            else:
                st.warning("Ê§úÁ¥¢„Ç≠„Éº„ÉØ„Éº„Éâ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
    
    if st.session_state.current_data is not None and len(st.session_state.current_data) > 0:
        st.markdown("---")
        st.markdown("#### „Çπ„ÉÜ„ÉÉ„Éó2: Á∑®ÈõÜÂØæË±°„ÇíÈÅ∏Êäû")
        
        df = st.session_state.current_data
        st.dataframe(df, use_container_width=True, height=250)
        
        # Á∑®ÈõÜÂØæË±°„ÅÆID„ÇíÈÅ∏Êäû
        selected_id = st.selectbox(
            f"Á∑®ÈõÜ„Åô„Çã„Éá„Éº„Çø„ÅÆID (Âàó: `{id_column}`)",
            df[id_column].tolist(),
            format_func=lambda x: f"ID: {x}",
            key="edit_select_id"
        )
        
        selected_row = df[df[id_column] == selected_id].iloc[0]
        
        # **Áõ¥ÊÑüÁöÑ„Å™ÊîπÂñÑ: ÈÅ∏Êäû„Åó„ÅüË°å„ÅÆÂÜÖÂÆπË°®Á§∫**
        with st.expander(f"ÈÅ∏Êäû‰∏≠„ÅÆ„Éá„Éº„Çø ({selected_id})", expanded=True):
            st.json(selected_row.to_dict())
            
        st.markdown("---")
        st.markdown("#### „Çπ„ÉÜ„ÉÉ„Éó3: „Éá„Éº„Çø„ÇíÁ∑®ÈõÜ„Åó„Å¶‰øùÂ≠ò")
        
        with st.form("edit_form"):
            updated_data = {}
            cols = st.columns(2)
            
            for idx, (col_name, col_type) in enumerate(table_columns.items()):
                with cols[idx % 2]:
                    
                    if col_name == id_column:
                        st.caption(f"üîë **{col_name}**: `{selected_row[col_name]}`Ôºà‰∏ª„Ç≠„Éº„ÅÆ„Åü„ÇÅÂ§âÊõ¥‰∏çÂèØÔºâ")
                        continue
                    
                    current_value = selected_row.get(col_name)
                    is_na = pd.isna(current_value) or current_value is None
                    
                    if col_type == 'boolean':
                        initial_value = bool(current_value) if not is_na else False
                        updated_data[col_name] = st.checkbox(f"**{col_name}**", value=initial_value, key=f"edit_{col_name}")

                    elif col_type == 'integer':
                        initial_value = int(current_value) if not is_na else None
                        updated_data[col_name] = st.number_input(f"**{col_name}** (Êï¥Êï∞)", value=initial_value, step=1, key=f"edit_{col_name}_int", format="%d")

                    elif col_type == 'number':
                        initial_value = float(current_value) if not is_na else None
                        updated_data[col_name] = st.number_input(f"**{col_name}** (Â∞èÊï∞)", value=initial_value, step=0.01, format="%.2f", key=f"edit_{col_name}_float")

                    elif col_type == 'datetime':
                        # Êó•‰ªò„Å®ÊôÇÂàª„ÇíÂàÜÈõ¢„Åó„Å¶Ë°®Á§∫„ÉªÁ∑®ÈõÜ
                        dt_value = pd.to_datetime(current_value, errors='coerce') if not is_na else datetime.now()
                        
                        col_date, col_time = st.columns(2)
                        with col_date:
                            date_val = st.date_input(f"**{col_name}** (Êó•‰ªò)", value=dt_value.date(), key=f"edit_{col_name}_date")
                        with col_time:
                            time_val = st.time_input(f"**{col_name}** (ÊôÇÂàª)", value=dt_value.time(), key=f"edit_{col_name}_time")
                        
                        updated_data[col_name] = f"{date_val} {time_val}"

                    else:
                        initial_value = str(current_value) if not is_na else ""
                        updated_data[col_name] = st.text_input(f"**{col_name}** („ÉÜ„Ç≠„Çπ„Éà)", value=initial_value, key=f"edit_{col_name}_text")
            
            st.markdown("---")
            submitted = st.form_submit_button("üíæ Â§âÊõ¥„Çí‰øùÂ≠ò„Åô„Çã", type="primary", use_container_width=True)
            
            if submitted:
                # Â§âÊõ¥„Åå„Å™„ÅÑ„Ç≠„Éº„ÅØÈô§Â§ñ
                data_to_update = {}
                for k, v in updated_data.items():
                    current_val = selected_row.get(k)
                    # NaN, None, Á©∫ÊñáÂ≠óÂàó„ÅÆÊØîËºÉ„ÇíÈÅ©Âàá„Å´Ë°å„ÅÜ
                    if current_val is None or (isinstance(current_val, str) and current_val.strip() == ""):
                        is_same = (v is None or (isinstance(v, str) and v.strip() == ""))
                    else:
                        is_same = str(v) == str(current_val)
                        
                    if not is_same:
                         data_to_update[k] = v
                
                # updated_at „ÅØÈÄöÂ∏∏SupabaseÂÅ¥„ÅßÊõ¥Êñ∞„Åï„Çå„Çã„Åü„ÇÅ„ÄÅÊòéÁ§∫ÁöÑ„Å´Âê´„ÇÅ„Å™„ÅÑ
                if 'updated_at' in data_to_update:
                    del data_to_update['updated_at']

                if not data_to_update:
                    st.info("Â§âÊõ¥„Åï„Çå„ÅüÈ†ÖÁõÆ„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ")
                else:
                    success, message, response = update_data(selected_table, selected_id, data_to_update, id_column)
                    
                    if success:
                        st.success(message)
                        st.session_state.current_data = None # Ê§úÁ¥¢ÁµêÊûú„Çí„ÇØ„É™„Ç¢„Åó„Å¶„É™„Éï„É¨„ÉÉ„Ç∑„É•„Çí‰øÉ„Åô
                        time.sleep(1) 
                        st.rerun() # Âç≥ÊôÇÂèçÊò†
                    else:
                        st.error(message)

# ---

## üóëÔ∏è „Éá„Éº„Çø„ÅÆÂâäÈô§„É¢„Éº„Éâ

elif mode == "üóëÔ∏è „Éá„Éº„Çø„ÅÆÂâäÈô§":
    
    st.subheader(f"üóëÔ∏è `{selected_table}` „ÅÆ„Éá„Éº„Çø„ÇíÂâäÈô§")
    st.error("‚ö†Ô∏è **ÈáçË¶Å**: ÂâäÈô§„Åó„Åü„Éá„Éº„Çø„ÅØÂÖÉ„Å´Êàª„Åõ„Åæ„Åõ„Çì„ÄÇÊÖéÈáç„Å´Êìç‰Ωú„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
    
    id_column = 'id' if 'id' in column_names else (column_names[0] if column_names else None)
    if not id_column:
        st.error("„ÉÜ„Éº„Éñ„É´„Å´Âàó„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ")
        st.stop()
        
    st.markdown("#### „Çπ„ÉÜ„ÉÉ„Éó1: ÂâäÈô§„Åô„Çã„Éá„Éº„Çø„ÇíË¶ã„Å§„Åë„Çã")
    
    col_a, col_b, col_c = st.columns([3, 3, 1])
    with col_a:
        search_col = st.selectbox("Ê§úÁ¥¢„Åô„ÇãÂàó", column_names, key="delete_search_col")
    with col_b:
        search_val = st.text_input("Ê§úÁ¥¢„Ç≠„Éº„ÉØ„Éº„Éâ", key="delete_search_val")
    with col_c:
        st.markdown("<br>", unsafe_allow_html=True) 
        if st.button("üîç Ê§úÁ¥¢", type="primary", key="delete_search_btn", use_container_width=True):
            if search_val:
                query = supabase.table(selected_table).select("*").ilike(search_col, f"%{search_val}%").limit(20)
                df = execute_query(query)
                
                if df is not None and len(df) > 0:
                    st.session_state.current_data = df
                    st.success(f"‚úÖ {len(df)}‰ª∂Ë¶ã„Å§„Åã„Çä„Åæ„Åó„Åü„ÄÇ")
                else:
                    st.session_state.current_data = None
                    st.warning("‚ö†Ô∏è „Éá„Éº„Çø„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ")
            else:
                st.warning("Ê§úÁ¥¢„Ç≠„Éº„ÉØ„Éº„Éâ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")

    if st.session_state.current_data is not None and len(st.session_state.current_data) > 0:
        st.markdown("---")
        st.markdown("#### „Çπ„ÉÜ„ÉÉ„Éó2: ÂâäÈô§„Åô„Çã„Éá„Éº„Çø„ÇíÈÅ∏Êäû")
        
        df = st.session_state.current_data
        st.dataframe(df, use_container_width=True, height=250)
        
        
        selected_id = st.selectbox(
            f"ÂâäÈô§„Åô„Çã„Éá„Éº„Çø„ÅÆID (Âàó: `{id_column}`)",
            df[id_column].tolist(),
            format_func=lambda x: f"ID: {x}",
            key="delete_select_id"
        )
        
        selected_row = df[df[id_column] == selected_id].iloc[0]
        
        st.markdown("---")
        st.markdown("#### „Çπ„ÉÜ„ÉÉ„Éó3: ÂâäÈô§„ÅÆÊúÄÁµÇÁ¢∫Ë™ç")
        
        # **Áõ¥ÊÑüÁöÑ„Å™ÊîπÂñÑ: ÈÅ∏Êäû„Åó„ÅüË°å„ÅÆÂÜÖÂÆπË°®Á§∫**
        with st.expander(f"üî¥ ÂâäÈô§ÂØæË±°„Éá„Éº„Çø„ÅÆË©≥Á¥∞ ({selected_id}) „ÇíÁ¢∫Ë™ç", expanded=True):
            st.json(selected_row.to_dict())
        
        st.error(f"Êú¨ÂΩì„Å´ID `{selected_id}` „ÅÆ„Éá„Éº„Çø„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü")
        
        col1, col2 = st.columns([1, 3])
        
        with col1:
            if st.button("üóëÔ∏è ÂÆåÂÖ®„Å´ÂâäÈô§„Åô„Çã", type="primary", use_container_width=True):
                success, message, response = delete_data(selected_table, selected_id, id_column)
                
                if success:
                    st.success(message)
                    st.session_state.current_data = None # Ê§úÁ¥¢ÁµêÊûú„Çí„ÇØ„É™„Ç¢„Åó„Å¶„É™„Éï„É¨„ÉÉ„Ç∑„É•
                    st.session_state.last_search_executed = False
                    time.sleep(1)
                    st.rerun() # Âç≥ÊôÇÂèçÊò†
                else:
                    st.error(message)
        
        with col2:
            if st.button("‚ùå ÂâäÈô§„Çí„Ç≠„É£„É≥„Çª„É´", use_container_width=True):
                st.session_state.current_data = None
                st.rerun()
