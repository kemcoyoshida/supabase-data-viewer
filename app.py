import streamlit as st
from supabase import create_client, Client
import pandas as pd
from datetime import datetime

# ========================================
# Êé•Á∂öÊÉÖÂ†±
# ========================================

SUPABASE_URL = "https://uevlguozshzwywzqtsvr.supabase.co"

if "SUPABASE_KEY" in st.secrets:
    SUPABASE_KEY = st.secrets["SUPABASE_KEY"]
else:
    SUPABASE_KEY = None
    st.error("üö® Êé•Á∂ö„Ç≠„Éº„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì")
    st.stop()

# Supabase„ÇØ„É©„Ç§„Ç¢„É≥„Éà‰ΩúÊàê
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# „Çª„ÉÉ„Ç∑„Éß„É≥Áä∂ÊÖã„ÅÆÂàùÊúüÂåñ
if 'conditions' not in st.session_state:
    st.session_state.conditions = []
if 'selected_table' not in st.session_state:
    st.session_state.selected_table = None
if 'current_data' not in st.session_state:
    st.session_state.current_data = None

# ========================================
# ‰æøÂà©„Å™Èñ¢Êï∞
# ========================================

@st.cache_data(ttl=300)
def get_all_tables():
    """Supabase„Åã„ÇâÂÖ®„ÉÜ„Éº„Éñ„É´Âêç„ÇíÂèñÂæó"""
    try:
        # PostgreSQL„ÅÆÊÉÖÂ†±„Çπ„Ç≠„Éº„Éû„Åã„Çâ„ÉÜ„Éº„Éñ„É´‰∏ÄË¶ß„ÇíÂèñÂæó
        response = supabase.rpc('get_table_names').execute()
        if response.data:
            return [table['table_name'] for table in response.data]
    except:
        pass
    
    # RPC„Åå‰Ωø„Åà„Å™„ÅÑÂ†¥Âêà„ÅØÊó¢Áü•„ÅÆ„ÉÜ„Éº„Éñ„É´„ÇíËøî„Åô
    # ‚ÄªÂÆüÈöõ„Å´„ÅØÊâãÂãï„Åß„ÉÜ„Éº„Éñ„É´Âêç„ÇíÂàóÊåô
    known_tables = ["t_machinecode", "t_employees", "t_sales"]
    return known_tables

@st.cache_data(ttl=300)
def get_table_structure(table_name: str):
    """„ÉÜ„Éº„Éñ„É´„ÅÆÊßãÈÄ†ÔºàÂàóÂêç„Å®„Éá„Éº„ÇøÂûãÔºâ„ÇíÂèñÂæó"""
    try:
        # 1‰ª∂„Å†„ÅëÂèñÂæó„Åó„Å¶Âàó„ÇíÁ¢∫Ë™ç
        response = supabase.table(table_name).select("*").limit(1).execute()
        
        if response.data and len(response.data) > 0:
            sample_data = response.data[0]
            columns = {}
            
            for key, value in sample_data.items():
                # „Éá„Éº„ÇøÂûã„ÇíÊé®Ê∏¨
                if isinstance(value, bool):
                    columns[key] = 'boolean'
                elif isinstance(value, int):
                    columns[key] = 'integer'
                elif isinstance(value, float):
                    columns[key] = 'number'
                elif isinstance(value, str):
                    # Êó•‰ªò„Å£„ÅΩ„ÅÑ„ÅãÁ¢∫Ë™ç
                    if 'date' in key.lower() or 'time' in key.lower() or 'at' in key.lower():
                        columns[key] = 'datetime'
                    else:
                        columns[key] = 'text'
                else:
                    columns[key] = 'text'
            
            return columns
        
        return {}
    except Exception as e:
        st.error(f"„ÉÜ„Éº„Éñ„É´ÊßãÈÄ†„ÅÆÂèñÂæó„Ç®„É©„Éº: {e}")
        return {}

def build_query_with_conditions(table_name: str, conditions: list, order_by: str, order_direction: str, limit: int):
    """Êù°‰ª∂„Åã„Çâ„ÇØ„Ç®„É™„Å®SQLÊñá„ÇíÊßãÁØâ"""
    query = supabase.table(table_name).select("*")
    sql_parts = [f"SELECT * FROM {table_name}"]
    where_clauses = []
    
    # Êù°‰ª∂„ÇíËøΩÂä†
    for cond in conditions:
        column = cond['column']
        operator = cond['operator']
        value = cond['value']
        
        if operator == "Âê´„ÇÄ":
            query = query.ilike(column, f"%{value}%")
            where_clauses.append(f"{column} LIKE '%{value}%'")
        elif operator == "Á≠â„Åó„ÅÑ":
            query = query.eq(column, value)
            where_clauses.append(f"{column} = '{value}'")
        elif operator == "Âê´„Åæ„Å™„ÅÑ":
            query = query.not_.ilike(column, f"%{value}%")
            where_clauses.append(f"{column} NOT LIKE '%{value}%'")
        elif operator == "‰ª•‰∏ä":
            query = query.gte(column, value)
            where_clauses.append(f"{column} >= {value}")
        elif operator == "‰ª•‰∏ã":
            query = query.lte(column, value)
            where_clauses.append(f"{column} <= {value}")
        elif operator == "„Çà„ÇäÂ§ß„Åç„ÅÑ":
            query = query.gt(column, value)
            where_clauses.append(f"{column} > {value}")
        elif operator == "„Çà„ÇäÂ∞è„Åï„ÅÑ":
            query = query.lt(column, value)
            where_clauses.append(f"{column} < {value}")
        elif operator == "Á©∫„Åß„Å™„ÅÑ":
            query = query.not_.is_('null', column)
            where_clauses.append(f"{column} IS NOT NULL")
        elif operator == "Á©∫":
            query = query.is_('null', column)
            where_clauses.append(f"{column} IS NULL")
    
    if where_clauses:
        sql_parts.append("WHERE " + " AND ".join(where_clauses))
    
    # ORDER BY
    if order_by and order_by != "„Å™„Åó":
        asc = order_direction == "ÊòáÈ†Ü"
        query = query.order(order_by, desc=not asc)
        direction = "ASC" if asc else "DESC"
        sql_parts.append(f"ORDER BY {order_by} {direction}")
    
    # LIMIT
    query = query.limit(limit)
    sql_parts.append(f"LIMIT {limit}")
    
    sql_text = "\n".join(sql_parts)
    return query, sql_text

def execute_query(query):
    """„ÇØ„Ç®„É™„ÇíÂÆüË°å"""
    try:
        response = query.execute()
        if response.data:
            return pd.DataFrame(response.data)
        return pd.DataFrame()
    except Exception as e:
        st.error(f"‚ùå „ÇØ„Ç®„É™ÂÆüË°å„Ç®„É©„Éº: {e}")
        return None

def insert_data(table_name: str, data: dict):
    """„Éá„Éº„Çø„ÇíËøΩÂä†"""
    try:
        response = supabase.table(table_name).insert(data).execute()
        return True, "‚úÖ „Éá„Éº„Çø„ÇíËøΩÂä†„Åó„Åæ„Åó„Åü"
    except Exception as e:
        return False, f"‚ùå „Ç®„É©„Éº: {e}"

def update_data(table_name: str, row_id: any, data: dict, id_column: str = 'id'):
    """„Éá„Éº„Çø„ÇíÊõ¥Êñ∞"""
    try:
        response = supabase.table(table_name).update(data).eq(id_column, row_id).execute()
        return True, "‚úÖ „Éá„Éº„Çø„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü"
    except Exception as e:
        return False, f"‚ùå „Ç®„É©„Éº: {e}"

def delete_data(table_name: str, row_id: any, id_column: str = 'id'):
    """„Éá„Éº„Çø„ÇíÂâäÈô§"""
    try:
        response = supabase.table(table_name).delete().eq(id_column, row_id).execute()
        return True, "‚úÖ „Éá„Éº„Çø„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü"
    except Exception as e:
        return False, f"‚ùå „Ç®„É©„Éº: {e}"

# ========================================
# UIÊßãÁØâ
# ========================================

st.set_page_config(page_title="„Éá„Éº„Çø„Éô„Éº„ÇπÁÆ°ÁêÜ", layout="wide", page_icon="üóÑÔ∏è")

# „Éò„ÉÉ„ÉÄ„Éº
st.title("üóÑÔ∏è „Éá„Éº„Çø„Éô„Éº„ÇπÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†")
st.markdown("**Ë™∞„Åß„ÇÇÁ∞°Âçò„Å´„Éá„Éº„Çø„Éô„Éº„Çπ„ÇíÊìç‰Ωú„Åß„Åç„Åæ„Åô**ÔºàSQLÁü•Ë≠ò‰∏çË¶ÅÔºâ")

# ========================================
# „Çµ„Ç§„Éâ„Éê„Éº
# ========================================

st.sidebar.header("üéõÔ∏è Êìç‰Ωú„É°„Éã„É•„Éº")

# „É¢„Éº„ÉâÈÅ∏Êäû
mode = st.sidebar.radio(
    "‰Ωï„Çí„Åó„Åæ„Åô„ÅãÔºü",
    ["üìä „Éá„Éº„Çø„ÇíË¶ã„Çã„ÉªÊ§úÁ¥¢", "‚ûï „Éá„Éº„Çø„ÇíËøΩÂä†", "‚úèÔ∏è „Éá„Éº„Çø„ÇíÁ∑®ÈõÜ", "üóëÔ∏è „Éá„Éº„Çø„ÇíÂâäÈô§"],
    label_visibility="collapsed"
)

st.sidebar.markdown("---")

# „ÉÜ„Éº„Éñ„É´ÈÅ∏Êäû
st.sidebar.subheader("üìÅ „ÉÜ„Éº„Éñ„É´ÈÅ∏Êäû")

# „ÉÜ„Éº„Éñ„É´‰∏ÄË¶ß„ÇíÂèñÂæó
with st.spinner("„ÉÜ„Éº„Éñ„É´‰∏ÄË¶ß„ÇíË™≠„ÅøËæº„Åø‰∏≠..."):
    tables = get_all_tables()

if not tables:
    st.sidebar.warning("‚ö†Ô∏è „ÉÜ„Éº„Éñ„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì")
    st.error("Supabase„Å´„ÉÜ„Éº„Éñ„É´„ÅåÂ≠òÂú®„Åó„Å™„ÅÑ„Åã„ÄÅ„Ç¢„ÇØ„Çª„ÇπÊ®©Èôê„Åå„ÅÇ„Çä„Åæ„Åõ„Çì")
    st.stop()

selected_table = st.sidebar.selectbox(
    "„ÉÜ„Éº„Éñ„É´„ÇíÈÅ∏Êäû",
    tables,
    help="Êìç‰Ωú„Åó„Åü„ÅÑ„ÉÜ„Éº„Éñ„É´„ÇíÈÅ∏„Çì„Åß„Åè„Å†„Åï„ÅÑ"
)

# „ÉÜ„Éº„Éñ„É´„ÅåÂ§â„Çè„Å£„Åü„Çâ„Çª„ÉÉ„Ç∑„Éß„É≥„Çí„É™„Çª„ÉÉ„Éà
if st.session_state.selected_table != selected_table:
    st.session_state.selected_table = selected_table
    st.session_state.conditions = []
    st.session_state.current_data = None

# „ÉÜ„Éº„Éñ„É´ÊßãÈÄ†„ÇíÂèñÂæó
table_columns = get_table_structure(selected_table)

if not table_columns:
    st.sidebar.error("‚ùå „ÉÜ„Éº„Éñ„É´ÊßãÈÄ†„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü")
    st.stop()

column_names = list(table_columns.keys())

st.sidebar.success(f"‚úÖ {len(column_names)}Âàó„ÅÆ„ÉÜ„Éº„Éñ„É´")

# ========================================
# „É¢„Éº„Éâ1: „Éá„Éº„Çø„ÇíË¶ã„Çã„ÉªÊ§úÁ¥¢
# ========================================

if mode == "üìä „Éá„Éº„Çø„ÇíË¶ã„Çã„ÉªÊ§úÁ¥¢":
    
    st.sidebar.markdown("---")
    st.sidebar.subheader("üîç Ê§úÁ¥¢Êù°‰ª∂")
    
    # Êù°‰ª∂ËøΩÂä†„Éï„Ç©„Éº„É†
    with st.sidebar.expander("‚ûï Êù°‰ª∂„ÇíËøΩÂä†„Åô„Çã", expanded=len(st.session_state.conditions) == 0):
        
        new_column = st.selectbox("Âàó„ÇíÈÅ∏Êäû", column_names, key="search_col")
        
        # Âàó„ÅÆ„Éá„Éº„ÇøÂûã„Å´Âøú„Åò„Å¶ÊºîÁÆóÂ≠ê„ÇíÂ§â„Åà„Çã
        col_type = table_columns.get(new_column, 'text')
        
        if col_type in ['integer', 'number']:
            operators = ["Á≠â„Åó„ÅÑ", "‰ª•‰∏ä", "‰ª•‰∏ã", "„Çà„ÇäÂ§ß„Åç„ÅÑ", "„Çà„ÇäÂ∞è„Åï„ÅÑ", "Á©∫„Åß„Å™„ÅÑ", "Á©∫"]
        elif col_type == 'boolean':
            operators = ["Á≠â„Åó„ÅÑ"]
        else:
            operators = ["Âê´„ÇÄ", "Á≠â„Åó„ÅÑ", "Âê´„Åæ„Å™„ÅÑ", "Á©∫„Åß„Å™„ÅÑ", "Á©∫"]
        
        new_operator = st.selectbox("Êù°‰ª∂", operators, key="search_op")
        
        # ÂÄ§„ÅÆÂÖ•ÂäõÔºàÊºîÁÆóÂ≠ê„Å´„Çà„Å£„Å¶‰∏çË¶Å„Å™Â†¥Âêà„ÇÇ„ÅÇ„ÇãÔºâ
        if new_operator not in ["Á©∫„Åß„Å™„ÅÑ", "Á©∫"]:
            if col_type == 'boolean':
                new_value = st.selectbox("ÂÄ§", ["true", "false"], key="search_val")
            elif col_type in ['integer', 'number']:
                new_value = st.number_input("ÂÄ§", key="search_val")
            elif col_type == 'datetime':
                new_value = st.date_input("Êó•‰ªò", key="search_val")
                new_value = str(new_value)
            else:
                new_value = st.text_input("ÂÄ§", key="search_val")
        else:
            new_value = ""
        
        col_a, col_b = st.columns(2)
        with col_a:
            if st.button("‚ûï ËøΩÂä†", use_container_width=True):
                if new_operator in ["Á©∫„Åß„Å™„ÅÑ", "Á©∫"] or new_value:
                    st.session_state.conditions.append({
                        'column': new_column,
                        'operator': new_operator,
                        'value': str(new_value) if new_value else ""
                    })
                    st.rerun()
                else:
                    st.warning("ÂÄ§„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
        
        with col_b:
            if st.button("üóëÔ∏è ÂÖ®ÂâäÈô§", use_container_width=True):
                st.session_state.conditions = []
                st.rerun()
    
    # ÁèæÂú®„ÅÆÊù°‰ª∂„ÇíË°®Á§∫
    if st.session_state.conditions:
        st.sidebar.markdown("**üìã ÁèæÂú®„ÅÆÊù°‰ª∂:**")
        for idx, cond in enumerate(st.session_state.conditions):
            col1, col2 = st.sidebar.columns([5, 1])
            with col1:
                if cond['value']:
                    st.caption(f"{cond['column']} {cond['operator']} '{cond['value']}'")
                else:
                    st.caption(f"{cond['column']} {cond['operator']}")
            with col2:
                if st.button("‚ùå", key=f"del_{idx}"):
                    st.session_state.conditions.pop(idx)
                    st.rerun()
    
    st.sidebar.markdown("---")
    st.sidebar.subheader("üìã ‰∏¶„Å≥Êõø„Åà")
    
    order_by = st.sidebar.selectbox("‰∏¶„Å≥Êõø„Åà„ÇãÂàó", ["„Å™„Åó"] + column_names)
    order_direction = st.sidebar.radio("È†ÜÂ∫è", ["ÊòáÈ†ÜÔºàÂ∞è‚ÜíÂ§ßÔºâ", "ÈôçÈ†ÜÔºàÂ§ß‚ÜíÂ∞èÔºâ"])
    order_direction = "ÊòáÈ†Ü" if "ÊòáÈ†Ü" in order_direction else "ÈôçÈ†Ü"
    
    if order_by == "„Å™„Åó":
        order_by = None
    
    st.sidebar.markdown("---")
    
    limit = st.sidebar.slider("üìä ÊúÄÂ§ßË°®Á§∫‰ª∂Êï∞", 10, 1000, 100, step=10)
    
    st.sidebar.markdown("---")
    
    search_button = st.sidebar.button("üîç Ê§úÁ¥¢ÂÆüË°å", type="primary", use_container_width=True)
    
    # „É°„Ç§„É≥„Ç®„É™„Ç¢
    if search_button:
        query, sql_text = build_query_with_conditions(
            selected_table,
            st.session_state.conditions,
            order_by,
            order_direction,
            limit
        )
        
        # SQLË°®Á§∫ÔºàÊäò„Çä„Åü„Åü„ÅøÔºâ
        with st.expander("üîß ÁîüÊàê„Åï„Çå„ÅüSQLÊñáÔºàÊäÄË°ìËÄÖÂêë„ÅëÔºâ"):
            st.code(sql_text, language="sql")
        
        # „Éá„Éº„ÇøÂèñÂæó
        with st.spinner("üì• „Éá„Éº„Çø„ÇíÂèñÂæó‰∏≠..."):
            df = execute_query(query)
        
        if df is not None and len(df) > 0:
            st.session_state.current_data = df
            
            # „É°„Éà„É™„ÇØ„Çπ
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("üìä ÂèñÂæó‰ª∂Êï∞", f"{len(df):,} ‰ª∂")
            with col2:
                st.metric("üìÇ ÂàóÊï∞", f"{len(df.columns)} Âàó")
            with col3:
                st.metric("üîç Êù°‰ª∂Êï∞", f"{len(st.session_state.conditions)} ÂÄã")
            
            st.markdown("---")
            
            # „Éá„Éº„ÇøË°®Á§∫
            st.subheader(f"üìã Ê§úÁ¥¢ÁµêÊûúÔºö{selected_table}")
            st.dataframe(df, use_container_width=True, height=400)
            
            # „ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
            csv = df.to_csv(index=False).encode('utf-8-sig')
            st.download_button(
                "üì• CSV„Åß„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ",
                csv,
                f"{selected_table}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                "text/csv",
                use_container_width=True
            )
            
            # Ë©≥Á¥∞ÊÉÖÂ†±
            with st.expander("üìä Áµ±Ë®àÊÉÖÂ†±"):
                numeric_cols = df.select_dtypes(include=['number']).columns
                if len(numeric_cols) > 0:
                    st.dataframe(df[numeric_cols].describe().T)
                else:
                    st.info("Êï∞ÂÄ§Âàó„Åå„ÅÇ„Çä„Åæ„Åõ„Çì")
            
        elif df is not None:
            st.warning("‚ö†Ô∏è Êù°‰ª∂„Å´‰∏ÄËá¥„Åô„Çã„Éá„Éº„Çø„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü")
            st.info("üí° Ê§úÁ¥¢Êù°‰ª∂„ÇíÂ§âÊõ¥„Åó„Å¶„Åø„Å¶„Åè„Å†„Åï„ÅÑ")
        else:
            st.error("‚ùå „Éá„Éº„ÇøÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")
    
    else:
        st.info("üëà Â∑¶„ÅÆ„Çµ„Ç§„Éâ„Éê„Éº„ÅßÊù°‰ª∂„ÇíË®≠ÂÆö„Åó„Å¶„ÄåÊ§úÁ¥¢ÂÆüË°å„Äç„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶„Åè„Å†„Åï„ÅÑ")

# ========================================
# „É¢„Éº„Éâ2: „Éá„Éº„Çø„ÇíËøΩÂä†
# ========================================

elif mode == "‚ûï „Éá„Éº„Çø„ÇíËøΩÂä†":
    
    st.subheader(f"‚ûï {selected_table} „Å´Êñ∞„Åó„ÅÑ„Éá„Éº„Çø„ÇíËøΩÂä†")
    
    st.markdown("**„Éï„Ç©„Éº„É†„Å´ÊÉÖÂ†±„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ**")
    
    with st.form("add_form"):
        new_data = {}
        
        # ÂêÑÂàó„ÅÆÂÖ•Âäõ„Éï„Ç£„Éº„É´„Éâ„Çí‰ΩúÊàê
        cols = st.columns(2)
        
        for idx, (col_name, col_type) in enumerate(table_columns.items()):
            
            with cols[idx % 2]:
                
                # idÂàó„ÅØËá™ÂãïÊé°Áï™„Åï„Çå„Çã„Åì„Å®„ÅåÂ§ö„ÅÑ„ÅÆ„Åß„Çπ„Ç≠„ÉÉ„Éó
                if col_name.lower() in ['id'] and col_type == 'integer':
                    st.caption(f"üîë {col_name}ÔºàËá™ÂãïÊé°Áï™Ôºâ")
                    continue
                
                # created_at, updated_at„ÇÇËá™ÂãïË®≠ÂÆö„Åï„Çå„Çã„Åì„Å®„ÅåÂ§ö„ÅÑ
                if col_name.lower() in ['created_at', 'updated_at']:
                    st.caption(f"üïê {col_name}ÔºàËá™ÂãïË®≠ÂÆöÔºâ")
                    continue
                
                # „Éá„Éº„ÇøÂûã„Å´Âøú„Åò„ÅüÂÖ•Âäõ„Éï„Ç£„Éº„É´„Éâ
                if col_type == 'boolean':
                    new_data[col_name] = st.checkbox(f"{col_name}", key=f"add_{col_name}")
                elif col_type == 'integer':
                    new_data[col_name] = st.number_input(f"{col_name}", step=1, key=f"add_{col_name}")
                elif col_type == 'number':
                    new_data[col_name] = st.number_input(f"{col_name}", step=0.01, format="%.2f", key=f"add_{col_name}")
                elif col_type == 'datetime':
                    date_val = st.date_input(f"{col_name}", key=f"add_{col_name}")
                    new_data[col_name] = str(date_val)
                else:
                    new_data[col_name] = st.text_input(f"{col_name}", key=f"add_{col_name}")
        
        submitted = st.form_submit_button("‚úÖ ËøΩÂä†„Åô„Çã", type="primary", use_container_width=True)
        
        if submitted:
            # Á©∫„ÅÆÂÄ§„ÇíÈô§Â§ñ
            filtered_data = {k: v for k, v in new_data.items() if v != "" and v is not None}
            
            if filtered_data:
                success, message = insert_data(selected_table, filtered_data)
                
                if success:
                    st.success(message)
                    st.balloons()
                    
                    # ËøΩÂä†„Åï„Çå„Åü„Éá„Éº„Çø„ÇíË°®Á§∫
                    with st.expander("üìã ËøΩÂä†„Åï„Çå„Åü„Éá„Éº„Çø"):
                        st.json(filtered_data)
                else:
                    st.error(message)
            else:
                st.warning("‚ö†Ô∏è Â∞ë„Å™„Åè„Å®„ÇÇ1„Å§„ÅÆÈ†ÖÁõÆ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ")

# ========================================
# „É¢„Éº„Éâ3: „Éá„Éº„Çø„ÇíÁ∑®ÈõÜ
# ========================================

elif mode == "‚úèÔ∏è „Éá„Éº„Çø„ÇíÁ∑®ÈõÜ":
    
    st.subheader(f"‚úèÔ∏è {selected_table} „ÅÆ„Éá„Éº„Çø„ÇíÁ∑®ÈõÜ")
    
    # „Åæ„Åö„Éá„Éº„Çø„ÇíÊ§úÁ¥¢„Åó„Å¶ÈÅ∏Êäû
    st.markdown("**„Çπ„ÉÜ„ÉÉ„Éó1: Á∑®ÈõÜ„Åô„Çã„Éá„Éº„Çø„ÇíÊ§úÁ¥¢**")
    
    # Á∞°ÊòìÊ§úÁ¥¢
    search_col = st.selectbox("Ê§úÁ¥¢„Åô„ÇãÂàó", column_names)
    search_val = st.text_input("Ê§úÁ¥¢ÂÄ§", placeholder="‰æã: ABC123")
    
    if st.button("üîç Ê§úÁ¥¢", type="primary"):
        query = supabase.table(selected_table).select("*").ilike(search_col, f"%{search_val}%").limit(20)
        df = execute_query(query)
        
        if df is not None and len(df) > 0:
            st.session_state.current_data = df
            st.success(f"‚úÖ {len(df)}‰ª∂Ë¶ã„Å§„Åã„Çä„Åæ„Åó„Åü")
        else:
            st.warning("‚ö†Ô∏è „Éá„Éº„Çø„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü")
    
    # Á∑®ÈõÜÂØæË±°„ÇíÈÅ∏Êäû
    if st.session_state.current_data is not None and len(st.session_state.current_data) > 0:
        st.markdown("---")
        st.markdown("**„Çπ„ÉÜ„ÉÉ„Éó2: Á∑®ÈõÜ„Åô„Çã„Éá„Éº„Çø„ÇíÈÅ∏Êäû**")
        
        df = st.session_state.current_data
        st.dataframe(df, use_container_width=True)
        
        # IDÂàó„ÇíÊé¢„Åô
        id_column = 'id' if 'id' in df.columns else df.columns[0]
        
        selected_id = st.selectbox(
            "Á∑®ÈõÜ„Åô„Çã„Éá„Éº„Çø„ÅÆID",
            df[id_column].tolist(),
            format_func=lambda x: f"{id_column}: {x}"
        )
        
        # ÈÅ∏Êäû„Åï„Çå„Åü„Éá„Éº„Çø„ÇíÂèñÂæó
        selected_row = df[df[id_column] == selected_id].iloc[0]
        
        st.markdown("---")
        st.markdown("**„Çπ„ÉÜ„ÉÉ„Éó3: „Éá„Éº„Çø„ÇíÁ∑®ÈõÜ**")
        
        with st.form("edit_form"):
            updated_data = {}
            
            cols = st.columns(2)
            
            for idx, (col_name, col_type) in enumerate(table_columns.items()):
                
                with cols[idx % 2]:
                    
                    # IDÂàó„ÅØÁ∑®ÈõÜ‰∏çÂèØ
                    if col_name == id_column:
                        st.caption(f"üîë {col_name}: {selected_row[col_name]}ÔºàÂ§âÊõ¥‰∏çÂèØÔºâ")
                        continue
                    
                    # ÁèæÂú®„ÅÆÂÄ§
                    current_value = selected_row.get(col_name, "")
                    
                    # „Éá„Éº„ÇøÂûã„Å´Âøú„Åò„ÅüÂÖ•Âäõ
                    if col_type == 'boolean':
                        updated_data[col_name] = st.checkbox(
                            f"{col_name}",
                            value=bool(current_value),
                            key=f"edit_{col_name}"
                        )
                    elif col_type == 'integer':
                        updated_data[col_name] = st.number_input(
                            f"{col_name}",
                            value=int(current_value) if current_value else 0,
                            step=1,
                            key=f"edit_{col_name}"
                        )
                    elif col_type == 'number':
                        updated_data[col_name] = st.number_input(
                            f"{col_name}",
                            value=float(current_value) if current_value else 0.0,
                            step=0.01,
                            key=f"edit_{col_name}"
                        )
                    else:
                        updated_data[col_name] = st.text_input(
                            f"{col_name}",
                            value=str(current_value) if current_value else "",
                            key=f"edit_{col_name}"
                        )
            
            submitted = st.form_submit_button("üíæ ‰øùÂ≠ò„Åô„Çã", type="primary", use_container_width=True)
            
            if submitted:
                success, message = update_data(selected_table, selected_id, updated_data, id_column)
                
                if success:
                    st.success(message)
                    st.balloons()
                    st.session_state.current_data = None
                else:
                    st.error(message)

# ========================================
# „É¢„Éº„Éâ4: „Éá„Éº„Çø„ÇíÂâäÈô§
# ========================================

elif mode == "üóëÔ∏è „Éá„Éº„Çø„ÇíÂâäÈô§":
    
    st.subheader(f"üóëÔ∏è {selected_table} „ÅÆ„Éá„Éº„Çø„ÇíÂâäÈô§")
    
    st.warning("‚ö†Ô∏è **Ê≥®ÊÑè**: ÂâäÈô§„Åó„Åü„Éá„Éº„Çø„ÅØÂÖÉ„Å´Êàª„Åõ„Åæ„Åõ„Çì")
    
    # „Éá„Éº„Çø„ÇíÊ§úÁ¥¢
    st.markdown("**„Çπ„ÉÜ„ÉÉ„Éó1: ÂâäÈô§„Åô„Çã„Éá„Éº„Çø„ÇíÊ§úÁ¥¢**")
    
    search_col = st.selectbox("Ê§úÁ¥¢„Åô„ÇãÂàó", column_names)
    search_val = st.text_input("Ê§úÁ¥¢ÂÄ§")
    
    if st.button("üîç Ê§úÁ¥¢", type="primary"):
        query = supabase.table(selected_table).select("*").ilike(search_col, f"%{search_val}%").limit(20)
        df = execute_query(query)
        
        if df is not None and len(df) > 0:
            st.session_state.current_data = df
            st.success(f"‚úÖ {len(df)}‰ª∂Ë¶ã„Å§„Åã„Çä„Åæ„Åó„Åü")
        else:
            st.warning("‚ö†Ô∏è „Éá„Éº„Çø„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü")
    
    # ÂâäÈô§ÂØæË±°„ÇíÈÅ∏Êäû
    if st.session_state.current_data is not None and len(st.session_state.current_data) > 0:
        st.markdown("---")
        st.markdown("**„Çπ„ÉÜ„ÉÉ„Éó2: ÂâäÈô§„Åô„Çã„Éá„Éº„Çø„ÇíÈÅ∏Êäû**")
        
        df = st.session_state.current_data
        st.dataframe(df, use_container_width=True)
        
        id_column = 'id' if 'id' in df.columns else df.columns[0]
        
        selected_id = st.selectbox(
            "ÂâäÈô§„Åô„Çã„Éá„Éº„Çø„ÅÆID",
            df[id_column].tolist(),
            format_func=lambda x: f"{id_column}: {x}"
        )
        
        # ÈÅ∏Êäû„Åï„Çå„Åü„Éá„Éº„Çø„ÇíË°®Á§∫
        selected_row = df[df[id_column] == selected_id].iloc[0]
        
        st.markdown("---")
        st.markdown("**„Çπ„ÉÜ„ÉÉ„Éó3: ÂâäÈô§„ÅÆÁ¢∫Ë™ç**")
        
        with st.expander("üîç ÂâäÈô§„Åô„Çã„Éá„Éº„Çø„ÅÆË©≥Á¥∞"):
            st.json(selected_row.to_dict())
        
        st.error("‚ö†Ô∏è Êú¨ÂΩì„Å´„Åì„ÅÆ„Éá„Éº„Çø„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü„Åì„ÅÆÊìç‰Ωú„ÅØÂèñ„ÇäÊ∂à„Åõ„Åæ„Åõ„Çì„ÄÇ")
        
        col1, col2 = st.columns([1, 3])
        
        with col1:
            if st.button("üóëÔ∏è ÂâäÈô§„Åô„Çã", type="primary", use_container_width=True):
                success, message = delete_data(selected_table, selected_id, id_column)
                
                if success:
                    st.success(message)
                    st.session_state.current_data = None
                    st.rerun()
                else:
                    st.error(message)
        
        with col2:
            if st.button("‚ùå „Ç≠„É£„É≥„Çª„É´", use_container_width=True):
                st.session_state.current_data = None
                st.rerun()

# ========================================
# „Éï„ÉÉ„Çø„Éº
# ========================================

st.sidebar.markdown("---")
st.sidebar.caption("üóÑÔ∏è „Éá„Éº„Çø„Éô„Éº„ÇπÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É† v2.0")
st.sidebar.caption("üí° ITÁü•Ë≠ò‰∏çË¶Å„ÅßË™∞„Åß„ÇÇ‰Ωø„Åà„Åæ„Åô")
