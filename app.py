# -*- coding: utf-8 -*-
import streamlit as st
from supabase import create_client, Client
import pandas as pd
from datetime import datetime
import re

# ========================================
# Êé•Á∂öÊÉÖÂ†±
# ========================================
SUPABASE_URL = "https://uevlguozshzwywzqtsvr.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVldmxndW96c2h6d3l3enF0c3ZyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkzMjkzMDcsImV4cCI6MjA3NDkwNTMwN30.hx82K_19c5Mmh9NXCCf15_yGDPLJ5O_XM_CnWuVMyZ8"
DATABASE_URL = "postgresql://postgres:20251002@db.uevlguozshzwywzqtsvr.supabase.co:5432/postgres"

supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

# ========================================
# „Éö„Éº„Ç∏Ë®≠ÂÆö
# ========================================
st.set_page_config(
    page_title="„Éá„Éº„Çø„Éô„Éº„ÇπÁÆ°ÁêÜ", 
    layout="wide", 
    page_icon="üìä",
    initial_sidebar_state="expanded"
)

# Ê¥óÁ∑¥„Åï„Çå„Åü„Éô„Éº„Ç∏„É•/„Ç∞„É™„Éº„É≥Á≥ªCSS
st.markdown("""
<style>
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');

* {
    font-family: 'Inter', sans-serif;
}

.main {
    background: #f5f5f0;
    padding: 1rem 2rem;
}

[data-testid="stSidebar"] {
    background: linear-gradient(180deg, #9caf88 0%, #8b9d7a 100%);
    padding: 0;
}

[data-testid="stSidebar"] * {
    color: #2d3a2e !important;
}

[data-testid="stSidebar"] .stMarkdown {
    color: #2d3a2e !important;
}

[data-testid="stSidebar"] p, 
[data-testid="stSidebar"] span,
[data-testid="stSidebar"] .stCaption {
    color: #2d3a2e !important;
}

[data-testid="stSidebar"] .element-container * {
    color: #2d3a2e !important;
}

[data-testid="stSidebar"] > div:first-child {
    padding: 2rem 1rem;
}

[data-testid="stSidebar"] .stRadio > label {
    display: none;
}

[data-testid="stSidebar"] .stRadio > div {
    gap: 0.5rem;
}

[data-testid="stSidebar"] .stRadio > div > label {
    background: rgba(255, 255, 255, 0.3);
    padding: 0.875rem 1rem;
    border-radius: 10px;
    cursor: pointer;
    transition: all 0.3s;
    font-weight: 500;
    font-size: 15px;
    min-height: 48px;
    display: flex;
    align-items: center;
    color: #2d3a2e !important;
}

[data-testid="stSidebar"] .stRadio > div > label:hover {
    background: rgba(255, 255, 255, 0.5);
    transform: translateX(5px);
}

[data-testid="stSidebar"] .stRadio > div > label[data-checked="true"] {
    background: rgba(255, 255, 255, 0.7);
    border-left: 4px solid #6b7c5e;
    font-weight: 600;
    box-shadow: 0 4px 12px rgba(107, 124, 94, 0.2);
}

[data-testid="stSidebar"] .stButton > button {
    width: 100%;
    height: 48px;
    font-size: 15px;
    font-weight: 600;
    border-radius: 10px;
    background: rgba(255, 255, 255, 0.8);
    color: #4a5c3e;
    border: 2px solid #8b9d7a;
    transition: all 0.3s;
    box-shadow: 0 2px 8px rgba(107, 124, 94, 0.15);
}

[data-testid="stSidebar"] .stButton > button:hover {
    background: white;
    border-color: #6b7c5e;
    box-shadow: 0 4px 16px rgba(107, 124, 94, 0.25);
    transform: translateY(-2px);
}

[data-testid="stMetric"] {
    background: white;
    padding: 1rem;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.06);
    border: 1px solid #e5e5e0;
}

[data-testid="stMetricValue"] {
    font-size: 28px;
    font-weight: 700;
    color: #6b7c5e;
}

[data-testid="stMetricLabel"] {
    font-size: 12px;
    font-weight: 600;
    color: #8b9d7a;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.stButton > button {
    border-radius: 8px;
    height: 48px;
    font-weight: 600;
    font-size: 15px;
    border: none;
    background: #8b9d7a;
    color: white;
    transition: all 0.3s;
    box-shadow: 0 2px 6px rgba(107, 124, 94, 0.2);
}

.stButton > button:hover {
    background: #7a8c6b;
    box-shadow: 0 4px 12px rgba(107, 124, 94, 0.3);
    transform: translateY(-2px);
}

.dataframe {
    border-radius: 8px;
    border: 1px solid #e5e5e0;
    font-size: 14px;
    background: white;
    box-shadow: 0 1px 4px rgba(0,0,0,0.05);
}

.page-title {
    font-size: 28px;
    font-weight: 800;
    color: #4a5c3e;
    margin-bottom: 0.25rem;
}

.page-subtitle {
    font-size: 14px;
    color: #6b7c5e;
    margin-bottom: 1rem;
    font-weight: 500;
}

.stTabs [data-baseweb="tab-list"] {
    gap: 8px;
    background-color: transparent;
    border-bottom: 2px solid #e5e5e0;
}

.stTabs [data-baseweb="tab"] {
    background-color: transparent;
    border-radius: 10px 10px 0 0;
    padding: 12px 24px;
    font-weight: 600;
    font-size: 15px;
    border: none;
    color: #6b7c5e;
}

.stTabs [aria-selected="true"] {
    background: white;
    color: #4a5c3e;
    border-bottom: 3px solid #8b9d7a;
}

.streamlit-expanderHeader {
    background: white;
    border-radius: 12px;
    font-weight: 600;
    font-size: 16px;
    border: 1px solid #e5e5e0;
    color: #4a5c3e;
}

.stSuccess {
    background-color: #f0f5ed;
    border-left: 4px solid #9caf88;
    color: #4a5c3e;
}

.stInfo {
    background-color: #fafaf8;
    border-left: 4px solid #a8b89a;
    color: #6b7c5e;
}

.stWarning {
    background-color: #fef9e7;
    border-left: 4px solid #d4a574;
    color: #8b6f47;
}

.info-card {
    background: white;
    border-radius: 12px;
    padding: 1rem;
    margin-bottom: 1rem;
    box-shadow: 0 2px 8px rgba(0,0,0,0.06);
    border: 1px solid #e5e5e0;
    transition: all 0.3s;
}

.info-card:hover {
    box-shadow: 0 4px 16px rgba(0,0,0,0.1);
    transform: translateY(-2px);
}

.info-card-blue {
    border-top: 3px solid #8b9d7a;
}

.info-card-orange {
    border-top: 3px solid #a8b89a;
}

.info-card-green {
    border-top: 3px solid #9caf88;
}

.card-header {
    font-size: 16px;
    font-weight: 700;
    color: #4a5c3e;
    margin-bottom: 0.75rem;
    display: flex;
    align-items: center;
    gap: 8px;
}

.card-header-icon {
    width: 32px;
    height: 32px;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 16px;
}

.info-list-item {
    padding: 0.5rem 0.75rem;
    margin: 0.35rem 0;
    background: #fafaf8;
    border-radius: 8px;
    border-left: 3px solid #9caf88;
    font-size: 13px;
    transition: all 0.3s;
}

.info-list-item:hover {
    background: #f0f0ed;
    transform: translateX(5px);
    box-shadow: 0 2px 6px rgba(107, 124, 94, 0.15);
}

p, span, label {
    color: #4a4a48;
}

h1, h2, h3, h4, h5, h6 {
    color: #4a5c3e;
}
</style>
""", unsafe_allow_html=True)

# ========================================
# „Éá„Éº„Çø„Éô„Éº„ÇπÈñ¢Êï∞
# ========================================
def get_available_tables():
    """Supabase„ÅÆÂÖ®„ÉÜ„Éº„Éñ„É´„ÇíËá™ÂãïÊ§úÂá∫ÔºàÈ´òÈÄüÁâàÔºâ"""
    try:
        import requests
        import json
        
        headers = {
            'apikey': SUPABASE_KEY,
            'Authorization': f'Bearer {SUPABASE_KEY}'
        }
        
        try:
            response = requests.get(f"{SUPABASE_URL}/rest/v1/", headers=headers)
            if response.status_code == 200:
                data = response.json()
                if 'definitions' in data:
                    tables = [key for key in data['definitions'].keys() if not key.startswith('_')]
                    return sorted(tables)
                elif 'paths' in data:
                    tables = []
                    for path in data['paths'].keys():
                        if path.startswith('/'):
                            table_name = path.strip('/').split('?')[0]
                            if table_name and not table_name.startswith('rpc'):
                                tables.append(table_name)
                    return sorted(list(set(tables)))
        except:
            pass
        
        possible_tables = set()
        
        prefixes = ['t_', 'T_', 'm_', 'M_', 'tbl_', 'v_', 'V_']
        
        keywords = [
            'machine', 'Machine', 'MACHINE',
            'code', 'Code', 'CODE',
            'unit', 'Unit', 'UNIT',
            'unitcode', 'Unitcode', 'UNITCODE',
            'machinecode', 'MachineCode', 'MACHINECODE',
            'machineunit', 'MachineUnit', 'MACHINEUNIT',
            'machineunitcode', 'MachineUnitCode', 'MACHINEUNITCODE',
            'expense', 'Expense', 'EXPENSE',
            'order', 'Order', 'ORDER',
            'accept', 'Accept', 'ACCEPT',
            'acceptorder', 'AcceptOrder', 'ACCEPTORDER',
            'purchase', 'Purchase', 'PURCHASE',
            'delivery', 'Delivery', 'DELIVERY',
            'user', 'User', 'USER', 'users', 'Users', 'USERS',
            'product', 'Product', 'PRODUCT', 'products', 'Products', 'PRODUCTS',
            'customer', 'Customer', 'CUSTOMER', 'customers', 'Customers', 'CUSTOMERS',
            'item', 'Item', 'ITEM', 'items', 'Items', 'ITEMS',
        ]
        
        for prefix in prefixes:
            for keyword in keywords:
                possible_tables.add(f"{prefix}{keyword}")
        
        possible_tables.update(keywords)
        
        found_tables = []
        for table in sorted(possible_tables):
            try:
                result = supabase.table(table).select("id").limit(1).execute()
                found_tables.append(table)
            except:
                pass
        
        return sorted(found_tables) if found_tables else []
        
    except Exception as e:
        print(f"Error getting tables: {e}")
        return []

def get_table_columns(table_name):
    """„ÉÜ„Éº„Éñ„É´„ÅÆ„Ç´„É©„É†‰∏ÄË¶ß„ÇíÂèñÂæó"""
    try:
        response = supabase.table(table_name).select("*").limit(1).execute()
        if response.data and len(response.data) > 0:
            return list(response.data[0].keys())
        else:
            try:
                response2 = supabase.table(table_name).select("*").limit(0).execute()
                if hasattr(response2, 'data'):
                    return []
            except:
                pass
        return []
    except Exception as e:
        print(f"Error getting columns for {table_name}: {e}")
        return []

def get_table_data(table_name, limit=1000):
    try:
        response = supabase.table(table_name).select("*").limit(limit).execute()
        if response.data:
            return pd.DataFrame(response.data)
        return pd.DataFrame()
    except:
        return pd.DataFrame()

def get_table_count(table_name):
    try:
        response = supabase.table(table_name).select("*", count="exact").execute()
        return response.count if hasattr(response, 'count') else len(response.data)
    except:
        return 0

def create_table_sql(table_name, columns):
    """„ÉÜ„Éº„Éñ„É´‰ΩúÊàêÁî®„ÅÆSQL„ÇíÁîüÊàê"""
    column_defs = []
    
    column_defs.append("id BIGSERIAL PRIMARY KEY")
    
    for col in columns:
        col_name = col['name']
        col_type = col['type']
        nullable = col.get('nullable', True)
        default = col.get('default', None)
        
        type_map = {
            '„ÉÜ„Ç≠„Çπ„Éà': 'TEXT',
            'Êï¥Êï∞': 'INTEGER',
            'Â∞èÊï∞': 'NUMERIC',
            'ÁúüÂÅΩÂÄ§': 'BOOLEAN',
            'Êó•‰ªò': 'DATE',
            'Êó•ÊôÇ': 'TIMESTAMP',
            'JSON': 'JSONB'
        }
        
        sql_type = type_map.get(col_type, 'TEXT')
        col_def = f"{col_name} {sql_type}"
        
        if not nullable:
            col_def += " NOT NULL"
        
        if default:
            if sql_type in ['TEXT']:
                col_def += f" DEFAULT '{default}'"
            elif sql_type == 'BOOLEAN':
                col_def += f" DEFAULT {default}"
            else:
                col_def += f" DEFAULT {default}"
        
        column_defs.append(col_def)
    
    column_defs.append("created_at TIMESTAMP DEFAULT NOW()")
    column_defs.append("updated_at TIMESTAMP DEFAULT NOW()")
    
    sql = f"CREATE TABLE {table_name} (\n  " + ",\n  ".join(column_defs) + "\n);"
    
    return sql

def create_table_direct(table_name, columns):
    """Supabase PostgreSQL„Éá„Éº„Çø„Éô„Éº„Çπ„Å´Áõ¥Êé•„ÉÜ„Éº„Éñ„É´„Çí‰ΩúÊàê"""
    try:
        sql = create_table_sql(table_name, columns)
        
        try:
            import psycopg2
            conn = psycopg2.connect(DATABASE_URL)
            cur = conn.cursor()
            cur.execute(sql)
            conn.commit()
            cur.close()
            conn.close()
            return True, "‚úÖ „ÉÜ„Éº„Éñ„É´„Çí‰ΩúÊàê„Åó„Åæ„Åó„ÅüÔºÅ"
        except ImportError:
            return False, "‚ùå psycopg2„Åå„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ'pip install psycopg2-binary'„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
        except Exception as e:
            return False, f"‚ùå „Éá„Éº„Çø„Éô„Éº„Çπ„Ç®„É©„Éº: {str(e)}"
            
    except Exception as e:
        return False, f"‚ùå „Ç®„É©„Éº: {str(e)}"

# ========================================
# „Çµ„Ç§„Éâ„Éê„Éº
# ========================================
with st.sidebar:
    st.markdown("# üìä „Éá„Éº„Çø„Éô„Éº„ÇπÁÆ°ÁêÜ")
    st.markdown("---")
    
    if 'page' not in st.session_state:
        st.session_state['page'] = "üè† „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ"
    
    page = st.radio(
        "„É°„Éã„É•„Éº",
        ["üè† „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ", "üÜï „ÉÜ„Éº„Éñ„É´‰ΩúÊàê", "üìã „Éá„Éº„ÇøÁÆ°ÁêÜ", "üîç Ê§úÁ¥¢", "üìä ÈõÜË®àÂàÜÊûê", "üîß SQLÂÆüË°å"],
        index=["üè† „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ", "üÜï „ÉÜ„Éº„Éñ„É´‰ΩúÊàê", "üìã „Éá„Éº„ÇøÁÆ°ÁêÜ", "üîç Ê§úÁ¥¢", "üìä ÈõÜË®àÂàÜÊûê", "üîß SQLÂÆüË°å"].index(st.session_state['page']) if st.session_state['page'] in ["üè† „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ", "üÜï „ÉÜ„Éº„Éñ„É´‰ΩúÊàê", "üìã „Éá„Éº„ÇøÁÆ°ÁêÜ", "üîç Ê§úÁ¥¢", "üìä ÈõÜË®àÂàÜÊûê", "üîß SQLÂÆüË°å"] else 0,
        label_visibility="collapsed"
    )
    
    st.session_state['page'] = page
    
    st.markdown("---")
    
    if st.button("üîÑ Êõ¥Êñ∞", use_container_width=True):
        st.cache_data.clear()
        st.rerun()
    
    with st.spinner("„ÉÜ„Éº„Éñ„É´„ÇíË™≠„ÅøËæº„Åø‰∏≠..."):
        available_tables = get_available_tables()
    
    if available_tables:
        st.success(f"‚úÖ {len(available_tables)}ÂÄã„ÅÆ„ÉÜ„Éº„Éñ„É´")
        
        with st.expander("üìã „ÉÜ„Éº„Éñ„É´‰∏ÄË¶ß", expanded=True):
            for table in available_tables:
                st.markdown(f"<span style='color: #e0e0e0;'>‚Ä¢ {table}</span>", unsafe_allow_html=True)
    else:
        st.warning("„ÉÜ„Éº„Éñ„É´„Å™„Åó")
        st.info("üí° Supabase„Å´„ÉÜ„Éº„Éñ„É´„Çí‰ΩúÊàêÂæå„ÄÅ„ÄåüîÑ Êõ¥Êñ∞„Äç„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
    
    st.markdown("---")
    
    if available_tables:
        st.markdown("### üìã „ÉÜ„Éº„Éñ„É´ÈÅ∏Êäû")
        st.caption("ÁèæÂú®„ÅÆ„ÉÜ„Éº„Éñ„É´")
        
        if len(available_tables) == 1:
            selected_table = available_tables[0]
            st.info(f"‚úì {selected_table}")
        else:
            if 'selected_table' not in st.session_state or st.session_state.get('selected_table') not in available_tables:
                st.session_state['selected_table'] = available_tables[0]
            
            selected_table = st.selectbox(
                "„ÉÜ„Éº„Éñ„É´„ÇíÈÅ∏„Å∂",
                available_tables,
                index=available_tables.index(st.session_state['selected_table']) if st.session_state['selected_table'] in available_tables else 0,
                label_visibility="collapsed",
                key="sidebar_table_select"
            )
            st.session_state['selected_table'] = selected_table
            
            count = get_table_count(selected_table)
            st.success(f"‚úì {selected_table}\n\n{count:,} „É¨„Ç≥„Éº„Éâ")
    else:
        selected_table = None
        st.warning("„ÉÜ„Éº„Éñ„É´„Åå„ÅÇ„Çä„Åæ„Åõ„Çì")

# ========================================
# üè† „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ
# ========================================
if page == "üè† „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ":
    st.markdown('<div class="page-title">üìä „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ</div>', unsafe_allow_html=True)
    st.markdown('<div class="page-subtitle">„Éá„Éº„Çø„Éô„Éº„ÇπÊ¶ÇË¶Å</div>', unsafe_allow_html=True)
    
    if available_tables:
        cols = st.columns(3)
        
        total_records = sum([get_table_count(t) for t in available_tables])
        
        with cols[0]:
            st.metric("Á∑è„É¨„Ç≥„Éº„ÉâÊï∞", f"{total_records:,}")
        
        with cols[1]:
            st.metric("„ÉÜ„Éº„Éñ„É´Êï∞", f"{len(available_tables)}")
        
        with cols[2]:
            st.metric("ÊúÄÁµÇÊõ¥Êñ∞", datetime.now().strftime("%Y/%m/%d"))
        
        st.markdown("")
        st.markdown("---")
        
        st.markdown("### üìã „ÉÜ„Éº„Éñ„É´‰∏ÄË¶ß")
        st.caption("„ÉÜ„Éº„Éñ„É´Âêç„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶„Éá„Éº„Çø„ÇíË°®Á§∫")
        
        for table in available_tables:
            count = get_table_count(table)
            
            col1, col2 = st.columns([3, 1])
            with col1:
                if st.button(f"üìä {table}", key=f"table_btn_{table}", use_container_width=True):
                    st.session_state['selected_table'] = table
                    st.session_state['page'] = "üìã „Éá„Éº„ÇøÁÆ°ÁêÜ"
                    st.rerun()
            with col2:
                st.markdown(f"**{count:,}** „É¨„Ç≥„Éº„Éâ")
    
    else:
        st.markdown("""
        <div class="info-card info-card-blue">
            <div class="card-header">
                <span>üëã „Çà„ÅÜ„Åì„Åù</span>
            </div>
            <p style="color:#718096;margin:0;">ÊúÄÂàù„ÅÆ„ÉÜ„Éº„Éñ„É´„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ</p>
        </div>
        """, unsafe_allow_html=True)

# ========================================
# üÜï „ÉÜ„Éº„Éñ„É´‰ΩúÊàê
# ========================================
elif page == "üÜï „ÉÜ„Éº„Éñ„É´‰ΩúÊàê":
    st.markdown('<div class="page-title">üÜï „ÉÜ„Éº„Éñ„É´‰ΩúÊàê</div>', unsafe_allow_html=True)
    st.markdown('<div class="page-subtitle">Êñ∞„Åó„ÅÑ„ÉÜ„Éº„Éñ„É´„ÇíSupabase„Å´‰ΩúÊàê</div>', unsafe_allow_html=True)
    
    if 'table_columns' not in st.session_state:
        st.session_state.table_columns = []
    
    st.markdown("### 1Ô∏è‚É£ „ÉÜ„Éº„Éñ„É´Âêç„ÇíÂÖ•Âäõ")
    st.caption("Ëã±Êï∞Â≠ó„Å®„Ç¢„É≥„ÉÄ„Éº„Çπ„Ç≥„Ç¢„ÅÆ„Åø‰ΩøÁî®„Åß„Åç„Åæ„ÅôÔºà‰æã: users, order_items, t_productsÔºâ")
    
    table_name = st.text_input(
        "„ÉÜ„Éº„Éñ„É´Âêç",
        placeholder="‰æã: users",
        help="Â∞èÊñáÂ≠ó„ÅÆËã±Êï∞Â≠ó„Å®„Ç¢„É≥„ÉÄ„Éº„Çπ„Ç≥„Ç¢„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
        label_visibility="collapsed"
    )
    
    if table_name:
        pattern = "^[a-z][a-z0-9_]*$"
        if not re.match(pattern, table_name):
            st.error("‚ùå „ÉÜ„Éº„Éñ„É´Âêç„ÅØÂ∞èÊñáÂ≠ó„ÅÆËã±Â≠ó„ÅßÂßã„Åæ„Çä„ÄÅËã±Êï∞Â≠ó„Å®„Ç¢„É≥„ÉÄ„Éº„Çπ„Ç≥„Ç¢„ÅÆ„Åø‰ΩøÁî®„Åß„Åç„Åæ„Åô")
            table_name = None
    
    st.markdown("---")
    
    st.markdown("### 2Ô∏è‚É£ „Ç´„É©„É†ÔºàÈ†ÖÁõÆÔºâ„ÇíËøΩÂä†")
    st.caption("„ÉÜ„Éº„Éñ„É´„Å´ÂøÖË¶Å„Å™È†ÖÁõÆ„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇid, created_at, updated_at„ÅØËá™Âãï„ÅßËøΩÂä†„Åï„Çå„Åæ„Åô„ÄÇ")
    
    with st.expander("‚ûï „Ç´„É©„É†„ÇíËøΩÂä†", expanded=True):
        col1, col2, col3, col4, col5 = st.columns([3, 2, 1, 2, 1])
        
        with col1:
            col_name = st.text_input(
                "„Ç´„É©„É†Âêç",
                placeholder="‰æã: name, email, price",
                help="Ëã±Êï∞Â≠ó„Å®„Ç¢„É≥„ÉÄ„Éº„Çπ„Ç≥„Ç¢„ÅÆ„Åø",
                key="new_col_name"
            )
        
        with col2:
            col_type = st.selectbox(
                "„Éá„Éº„ÇøÂûã",
                ["„ÉÜ„Ç≠„Çπ„Éà", "Êï¥Êï∞", "Â∞èÊï∞", "ÁúüÂÅΩÂÄ§", "Êó•‰ªò", "Êó•ÊôÇ", "JSON"],
                key="new_col_type"
            )
        
        with col3:
            col_nullable = st.checkbox("NULLË®±ÂèØ", value=True, key="new_col_nullable")
        
        with col4:
            col_default = st.text_input(
                "„Éá„Éï„Ç©„É´„ÉàÂÄ§",
                placeholder="ÁúÅÁï•ÂèØ",
                key="new_col_default"
            )
        
        with col5:
            st.write("")
            st.write("")
            if st.button("‚ûï", key="add_column_btn"):
                if col_name:
                    pattern = "^[a-z][a-z0-9_]*$"
                    if not re.match(pattern, col_name):
                        st.error("„Ç´„É©„É†Âêç„ÅØÂ∞èÊñáÂ≠ó„ÅÆËã±Â≠ó„ÅßÂßã„Åæ„Çä„ÄÅËã±Êï∞Â≠ó„Å®„Ç¢„É≥„ÉÄ„Éº„Çπ„Ç≥„Ç¢„ÅÆ„Åø‰ΩøÁî®„Åß„Åç„Åæ„Åô")
                    elif col_name in ['id', 'created_at', 'updated_at']:
                        st.error("id, created_at, updated_at„ÅØ‰∫àÁ¥ÑË™û„Åß„Åô")
                    elif any(c['name'] == col_name for c in st.session_state.table_columns):
                        st.error("Âêå„Åò„Ç´„É©„É†Âêç„ÅåÊó¢„Å´Â≠òÂú®„Åó„Åæ„Åô")
                    else:
                        st.session_state.table_columns.append({
                            'name': col_name,
                            'type': col_type,
                            'nullable': col_nullable,
                            'default': col_default if col_default else None
                        })
                        st.rerun()
                else:
                    st.error("„Ç´„É©„É†Âêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
    
    if st.session_state.table_columns:
        st.markdown("### üìã ËøΩÂä†„Åï„Çå„Åü„Ç´„É©„É†")
        
        st.info("üí° ‰ª•‰∏ã„ÅÆ„Ç´„É©„É†„Å´Âä†„Åà„Å¶„ÄÅidÔºà‰∏ª„Ç≠„ÉºÔºâ„ÄÅcreated_at„ÄÅupdated_at„ÅåËá™Âãï„ÅßËøΩÂä†„Åï„Çå„Åæ„Åô")
        
        for idx, col in enumerate(st.session_state.table_columns):
            col1, col2 = st.columns([9, 1])
            with col1:
                nullable_text = "NULLË®±ÂèØ" if col['nullable'] else "ÂøÖÈ†à"
                default_text = f"„ÄÅ„Éá„Éï„Ç©„É´„ÉàÂÄ§: {col['default']}" if col['default'] else ""
                st.success(f"‚úì **{col['name']}** ({col['type']}, {nullable_text}{default_text})")
            with col2:
                if st.button("‚ùå", key=f"del_col_{idx}"):
                    st.session_state.table_columns.pop(idx)
                    st.rerun()
    
    st.markdown("---")
    
    if table_name and st.session_state.table_columns:
        st.markdown("### üîß ÁîüÊàê„Åï„Çå„ÇãSQL")
        sql = create_table_sql(table_name, st.session_state.table_columns)
        
        with st.expander("üìù SQL„ÇíË°®Á§∫", expanded=False):
            st.code(sql, language="sql")
        
        st.markdown("---")
        
        col1, col2, col3 = st.columns([2, 2, 1])
        
        with col1:
            if st.button("üöÄ „ÉÜ„Éº„Éñ„É´„Çí‰ΩúÊàê„Åô„Çã", type="primary", use_container_width=True, key="create_table_btn"):
                with st.spinner("„ÉÜ„Éº„Éñ„É´„Çí‰ΩúÊàê‰∏≠..."):
                    result = create_table_direct(table_name, st.session_state.table_columns)
                    
                    if result[0] == True:
                        st.success(result[1])
                        st.balloons()
                        st.info("üí° „Çµ„Ç§„Éâ„Éê„Éº„ÅÆ„ÄåüîÑ Êõ¥Êñ∞„Äç„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶Êñ∞„Åó„ÅÑ„ÉÜ„Éº„Éñ„É´„ÇíË°®Á§∫„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
                        
                        if st.button("‚úÖ ÂÆå‰∫ÜÔºà„É™„Çª„ÉÉ„ÉàÔºâ", use_container_width=True):
                            st.session_state.table_columns = []
                            st.cache_data.clear()
                            st.rerun()
                    else:
                        st.error(result[1])
                        st.info("SQL„ÇíÊâãÂãï„ÅßÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
                        st.code(sql, language="sql")
                        
                        st.download_button(
                            "üìã SQL„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ",
                            sql.encode('utf-8'),
                            f"create_{table_name}.sql",
                            "text/plain;charset=utf-8",
                            use_container_width=True
                        )
        
        with col2:
            if st.button("üîÑ „É™„Çª„ÉÉ„Éà", use_container_width=True):
                st.session_state.table_columns = []
                st.rerun()
        
        with col3:
            pass
    
    elif table_name and not st.session_state.table_columns:
        st.warning("‚ö†Ô∏è „Ç´„É©„É†„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
    elif not table_name and st.session_state.table_columns:
        st.warning("‚ö†Ô∏è „ÉÜ„Éº„Éñ„É´Âêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
    else:
        st.info("üëÜ „ÉÜ„Éº„Éñ„É´Âêç„ÇíÂÖ•Âäõ„Åó„Å¶„Ç´„É©„É†„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
    
    with st.expander("üí° ‰Ωø„ÅÑÊñπ„ÅÆ„Éí„É≥„Éà"):
        st.markdown("""
        ### „Éá„Éº„ÇøÂûã„ÅÆË™¨Êòé
        - **„ÉÜ„Ç≠„Çπ„Éà**: ÊñáÂ≠óÂàó„Éá„Éº„ÇøÔºàÂêçÂâç„ÄÅË™¨Êòé„Å™„Å©Ôºâ
        - **Êï¥Êï∞**: Êï¥Êï∞ÔºàÂπ¥ÈΩ¢„ÄÅÂÄãÊï∞„Å™„Å©Ôºâ
        - **Â∞èÊï∞**: Â∞èÊï∞ÁÇπ„ÇíÂê´„ÇÄÊï∞ÂÄ§Ôºà‰æ°Ê†º„ÄÅÂâ≤Âêà„Å™„Å©Ôºâ
        - **ÁúüÂÅΩÂÄ§**: true/falseÔºà„Éï„É©„Ç∞„ÄÅÊúâÂäπ/ÁÑ°Âäπ„Å™„Å©Ôºâ
        - **Êó•‰ªò**: Êó•‰ªò„ÅÆ„ÅøÔºà2025-01-15Ôºâ
        - **Êó•ÊôÇ**: Êó•‰ªò„Å®ÊôÇÂàªÔºà2025-01-15 10:30:00Ôºâ
        - **JSON**: JSONÂΩ¢Âºè„ÅÆ„Éá„Éº„Çø
        
        ### „Çà„Åè„ÅÇ„Çã„ÉÜ„Éº„Éñ„É´„ÅÆ‰æã
        
        **„É¶„Éº„Ç∂„Éº„ÉÜ„Éº„Éñ„É´ (users)**
        - name („ÉÜ„Ç≠„Çπ„Éà, ÂøÖÈ†à)
        - email („ÉÜ„Ç≠„Çπ„Éà, ÂøÖÈ†à)
        - age (Êï¥Êï∞, NULLË®±ÂèØ)
        
        **ÂïÜÂìÅ„ÉÜ„Éº„Éñ„É´ (products)**
        - name („ÉÜ„Ç≠„Çπ„Éà, ÂøÖÈ†à)
        - price (Â∞èÊï∞, ÂøÖÈ†à)
        - stock (Êï¥Êï∞, „Éá„Éï„Ç©„É´„ÉàÂÄ§: 0)
        - is_active (ÁúüÂÅΩÂÄ§, „Éá„Éï„Ç©„É´„ÉàÂÄ§: true)
        
        **Ê≥®Êñá„ÉÜ„Éº„Éñ„É´ (orders)**
        - order_number („ÉÜ„Ç≠„Çπ„Éà, ÂøÖÈ†à)
        - customer_name („ÉÜ„Ç≠„Çπ„Éà, ÂøÖÈ†à)
        - total_amount (Â∞èÊï∞, ÂøÖÈ†à)
        - order_date (Êó•‰ªò, ÂøÖÈ†à)
        """)
    
    st.markdown("---")
    
    with st.expander("‚ö° „ÉÜ„É≥„Éó„É¨„Éº„Éà„Åã„Çâ‰ΩúÊàê"):
        st.markdown("### „Çà„Åè‰Ωø„ÅÜ„ÉÜ„Éº„Éñ„É´„ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„Éà")
        
        template_col1, template_col2 = st.columns(2)
        
        with template_col1:
            if st.button("üë• „É¶„Éº„Ç∂„Éº„ÉÜ„Éº„Éñ„É´", use_container_width=True):
                st.session_state.table_columns = [
                    {'name': 'name', 'type': '„ÉÜ„Ç≠„Çπ„Éà', 'nullable': False, 'default': None},
                    {'name': 'email', 'type': '„ÉÜ„Ç≠„Çπ„Éà', 'nullable': False, 'default': None},
                    {'name': 'age', 'type': 'Êï¥Êï∞', 'nullable': True, 'default': None},
                    {'name': 'is_active', 'type': 'ÁúüÂÅΩÂÄ§', 'nullable': False, 'default': 'true'},
                ]
                st.rerun()
            
            if st.button("üì¶ ÂïÜÂìÅ„ÉÜ„Éº„Éñ„É´", use_container_width=True):
                st.session_state.table_columns = [
                    {'name': 'name', 'type': '„ÉÜ„Ç≠„Çπ„Éà', 'nullable': False, 'default': None},
                    {'name': 'description', 'type': '„ÉÜ„Ç≠„Çπ„Éà', 'nullable': True, 'default': None},
                    {'name': 'price', 'type': 'Â∞èÊï∞', 'nullable': False, 'default': None},
                    {'name': 'stock', 'type': 'Êï¥Êï∞', 'nullable': False, 'default': '0'},
                    {'name': 'is_active', 'type': 'ÁúüÂÅΩÂÄ§', 'nullable': False, 'default': 'true'},
                ]
                st.rerun()
        
        with template_col2:
            if st.button("üìã Ê≥®Êñá„ÉÜ„Éº„Éñ„É´", use_container_width=True):
                st.session_state.table_columns = [
                    {'name': 'order_number', 'type': '„ÉÜ„Ç≠„Çπ„Éà', 'nullable': False, 'default': None},
                    {'name': 'customer_name', 'type': '„ÉÜ„Ç≠„Çπ„Éà', 'nullable': False, 'default': None},
                    {'name': 'total_amount', 'type': 'Â∞èÊï∞', 'nullable': False, 'default': None},
                    {'name': 'order_date', 'type': 'Êó•‰ªò', 'nullable': False, 'default': None},
                    {'name': 'status', 'type': '„ÉÜ„Ç≠„Çπ„Éà', 'nullable': False, 'default': 'pending'},
                ]
                st.rerun()
            
            if st.button("üè¢ ‰ºöÁ§æ„ÉÜ„Éº„Éñ„É´", use_container_width=True):
                st.session_state.table_columns = [
                    {'name': 'company_name', 'type': '„ÉÜ„Ç≠„Çπ„Éà', 'nullable': False, 'default': None},
                    {'name': 'address', 'type': '„ÉÜ„Ç≠„Çπ„Éà', 'nullable': True, 'default': None},
                    {'name': 'phone', 'type': '„ÉÜ„Ç≠„Çπ„Éà', 'nullable': True, 'default': None},
                    {'name': 'email', 'type': '„ÉÜ„Ç≠„Çπ„Éà', 'nullable': True, 'default': None},
                ]
                st.rerun()

# ========================================
# üìã „Éá„Éº„ÇøÁÆ°ÁêÜ
# ========================================
elif page == "üìã „Éá„Éº„ÇøÁÆ°ÁêÜ":
    st.markdown('<div class="page-title">üìã „Éá„Éº„ÇøÁÆ°ÁêÜ</div>', unsafe_allow_html=True)
    st.markdown('<div class="page-subtitle">„É¨„Ç≥„Éº„Éâ„ÅÆË°®Á§∫„ÉªËøΩÂä†„ÉªÁ∑®ÈõÜ„ÉªÂâäÈô§</div>', unsafe_allow_html=True)
    
    if not selected_table:
        st.warning("‚ö†Ô∏è „Çµ„Ç§„Éâ„Éê„Éº„Åã„Çâ„ÉÜ„Éº„Éñ„É´„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
        st.stop()
    
    tab1, tab2, tab3, tab4, tab5 = st.tabs(["üìã ‰∏ÄË¶ß", "‚ûï ËøΩÂä†", "‚úèÔ∏è Á∑®ÈõÜ", "üóëÔ∏è ÂâäÈô§", "üì§ „Ç§„É≥„Éù„Éº„Éà"])
    
    with tab1:
        col1, col2, col3 = st.columns([2, 1, 1])
        with col1:
            st.markdown(f"### {selected_table}")
        with col2:
            limit = st.selectbox("Ë°®Á§∫‰ª∂Êï∞", [100, 500, 1000], index=0)
        with col3:
            if st.button("üîÑ Êõ¥Êñ∞", use_container_width=True):
                st.rerun()
        
        df = get_table_data(selected_table, limit)
        if df is not None and len(df) > 0:
            st.info(f"üìä {len(df):,} ‰ª∂„ÅÆ„É¨„Ç≥„Éº„Éâ")
            st.dataframe(df, use_container_width=True, height=500, hide_index=True)
            
            csv = df.to_csv(index=False, encoding='utf-8-sig')
            st.download_button(
                "üì• CSV„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ",
                csv,
                f"{selected_table}_{datetime.now().strftime('%Y%m%d')}.csv",
                "text/csv",
                use_container_width=True
            )
        else:
            st.info("„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì")
    
    with tab2:
        st.markdown("### Êñ∞„Åó„ÅÑ„É¨„Ç≥„Éº„Éâ„ÇíËøΩÂä†")
        columns = get_table_columns(selected_table)
        
        if columns:
            with st.form("add_form", clear_on_submit=True):
                new_data = {}
                
                for col in columns:
                    if col.lower() in ['id', 'created_at', 'updated_at']:
                        continue
                    
                    if 'date' in col.lower():
                        new_data[col] = st.date_input(col)
                    elif any(word in col.lower() for word in ['price', 'amount', 'count', 'num']):
                        new_data[col] = st.number_input(col, min_value=0)
                    else:
                        new_data[col] = st.text_input(col)
                
                if st.form_submit_button("‚úÖ „É¨„Ç≥„Éº„Éâ„ÇíËøΩÂä†", type="primary", use_container_width=True):
                    filtered = {k: v for k, v in new_data.items() if v not in [None, '', 0]}
                    if filtered:
                        try:
                            supabase.table(selected_table).insert(filtered).execute()
                            st.success("‚úÖ „É¨„Ç≥„Éº„Éâ„ÇíËøΩÂä†„Åó„Åæ„Åó„Åü")
                            st.rerun()
                        except Exception as e:
                            st.error(f"„Ç®„É©„Éº: {e}")
        else:
            st.info("„ÉÜ„Éº„Éñ„É´„ÅÆÊßãÈÄ†„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü")
    
    with tab3:
        st.markdown("### „É¨„Ç≥„Éº„Éâ„ÇíÁ∑®ÈõÜ")
        
        df = get_table_data(selected_table, 1000)
        if df is not None and len(df) > 0:
            st.dataframe(df, use_container_width=True, height=250, hide_index=True)
            
            id_col = 'id' if 'id' in df.columns else df.columns[0]
            selected_id = st.selectbox("Á∑®ÈõÜ„Åô„ÇãID„ÇíÈÅ∏Êäû", df[id_col].tolist())
            row = df[df[id_col] == selected_id].iloc[0]
            
            with st.form("edit_form"):
                updated = {}
                
                for col in df.columns:
                    if col.lower() in ['id', 'created_at', 'updated_at']:
                        continue
                    
                    val = row[col]
                    if 'date' in col.lower():
                        try:
                            updated[col] = st.date_input(col, value=pd.to_datetime(val).date())
                        except:
                            updated[col] = st.date_input(col)
                    else:
                        updated[col] = st.text_input(col, value=str(val) if not pd.isna(val) else "")
                
                if st.form_submit_button("üíæ Â§âÊõ¥„Çí‰øùÂ≠ò", type="primary", use_container_width=True):
                    try:
                        supabase.table(selected_table).update(updated).eq(id_col, selected_id).execute()
                        st.success("‚úÖ „É¨„Ç≥„Éº„Éâ„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü")
                        st.rerun()
                    except Exception as e:
                        st.error(f"„Ç®„É©„Éº: {e}")
        else:
            st.info("„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì")
    
    with tab4:
        st.markdown("### „É¨„Ç≥„Éº„Éâ„ÇíÂâäÈô§")
        st.warning("‚ö†Ô∏è ÂâäÈô§„Åó„Åü„É¨„Ç≥„Éº„Éâ„ÅØÂæ©ÂÖÉ„Åß„Åç„Åæ„Åõ„Çì")
        
        df = get_table_data(selected_table, 1000)
        if df is not None and len(df) > 0:
            st.dataframe(df, use_container_width=True, height=250, hide_index=True)
            
            id_col = 'id' if 'id' in df.columns else df.columns[0]
            selected_id = st.selectbox("ÂâäÈô§„Åô„ÇãID„ÇíÈÅ∏Êäû", df[id_col].tolist(), key="del_id")
            
            if st.button("üóëÔ∏è „É¨„Ç≥„Éº„Éâ„ÇíÂâäÈô§", type="primary", use_container_width=True):
                try:
                    supabase.table(selected_table).delete().eq(id_col, selected_id).execute()
                    st.success("‚úÖ „É¨„Ç≥„Éº„Éâ„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü")
                    st.rerun()
                except Exception as e:
                    st.error(f"„Ç®„É©„Éº: {e}")
        else:
            st.info("„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì")
    
    with tab5:
        st.markdown("### CSV„Éï„Ç°„Ç§„É´„Çí„Ç§„É≥„Éù„Éº„Éà")
        
        col1, col2 = st.columns([3, 1])
        with col1:
            uploaded_file = st.file_uploader("CSV„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû", type=['csv'])
        with col2:
            encoding = st.selectbox(
                "ÊñáÂ≠ó„Ç≥„Éº„Éâ",
                ["utf-8", "shift_jis", "cp932", "utf-8-sig"],
                index=1,
                help="ÊñáÂ≠óÂåñ„Åë„Åô„ÇãÂ†¥Âêà„ÅØÂ§âÊõ¥„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
            )
        
        if uploaded_file is not None:
            try:
                df_upload = pd.read_csv(uploaded_file, encoding=encoding)
                st.dataframe(df_upload.head(10), use_container_width=True, hide_index=True)
                st.caption(f"„Éó„É¨„Éì„É•„ÉºÔºàÂÖ®{len(df_upload):,}‰ª∂Ôºâ")
                
                if st.button("‚úÖ „Éá„Éº„Çø„Çí„Ç§„É≥„Éù„Éº„Éà", type="primary", use_container_width=True):
                    progress_bar = st.progress(0)
                    success = 0
                    errors = 0
                    
                    for idx, row in df_upload.iterrows():
                        try:
                            row_dict = {k: v for k, v in row.to_dict().items() 
                                      if pd.notna(v) and k not in ['id', 'created_at', 'updated_at']}
                            if row_dict:
                                supabase.table(selected_table).insert(row_dict).execute()
                                success += 1
                        except:
                            errors += 1
                        progress_bar.progress((idx + 1) / len(df_upload))
                    
                    progress_bar.empty()
                    if success > 0:
                        st.success(f"‚úÖ {success:,}‰ª∂„ÅÆ„É¨„Ç≥„Éº„Éâ„Çí„Ç§„É≥„Éù„Éº„Éà„Åó„Åæ„Åó„Åü")
                        if errors > 0:
                            st.warning(f"‚ö†Ô∏è {errors}‰ª∂„ÅÆ„Ç®„É©„Éº„Åå„ÅÇ„Çä„Åæ„Åó„Åü")
                    else:
                        st.error("‚ùå „Ç§„É≥„Éù„Éº„Éà„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")
                    st.rerun()
            except UnicodeDecodeError:
                st.error("‚ùå ÊñáÂ≠ó„Ç≥„Éº„Éâ„ÅåÊ≠£„Åó„Åè„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇÂè≥ÂÅ¥„ÅÆ„ÄåÊñáÂ≠ó„Ç≥„Éº„Éâ„Äç„ÇíÂ§âÊõ¥„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
                st.info("üí° Êó•Êú¨Ë™û„ÅÆCSV„Éï„Ç°„Ç§„É´„ÅØÈÄöÂ∏∏„Äåshift_jis„Äç„Åæ„Åü„ÅØ„Äåcp932„Äç„Åß„Åô")
            except Exception as e:
                st.error(f"‚ùå „Ç®„É©„Éº: {e}")

# ========================================
# üîç Ê§úÁ¥¢
# ========================================
elif page == "üîç Ê§úÁ¥¢":
    st.markdown('<div class="page-title">üîç Ê§úÁ¥¢</div>', unsafe_allow_html=True)
    st.markdown('<div class="page-subtitle">„Ç≠„Éº„ÉØ„Éº„Éâ„ÇÑÊù°‰ª∂„Åß„É¨„Ç≥„Éº„Éâ„ÇíÊ§úÁ¥¢</div>', unsafe_allow_html=True)
    
    if not selected_table:
        st.warning("‚ö†Ô∏è „Çµ„Ç§„Éâ„Éê„Éº„Åã„Çâ„ÉÜ„Éº„Éñ„É´„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
        st.stop()
    
    tab1, tab2 = st.tabs(["üîç Á∞°ÂçòÊ§úÁ¥¢", "üéØ Ë©≥Á¥∞Ê§úÁ¥¢"])
    
    with tab1:
        st.markdown("### „Ç≠„Éº„ÉØ„Éº„Éâ„ÅßÊ§úÁ¥¢")
        col1, col2 = st.columns([4, 1])
        with col1:
            search_text = st.text_input("Ê§úÁ¥¢„Ç≠„Éº„ÉØ„Éº„Éâ", placeholder="Ê§úÁ¥¢„Åó„Åü„ÅÑ„ÉÜ„Ç≠„Çπ„Éà„ÇíÂÖ•Âäõ", label_visibility="collapsed")
        with col2:
            search_btn = st.button("üîç Ê§úÁ¥¢", type="primary", use_container_width=True)
        
        if search_btn and search_text:
            columns = get_table_columns(selected_table)
            all_results = []
            
            for col in columns:
                try:
                    response = supabase.table(selected_table).select("*").ilike(col, f"%{search_text}%").limit(100).execute()
                    if response.data:
                        all_results.extend(response.data)
                except:
                    continue
            
            if all_results:
                unique_data = []
                seen = set()
                for item in all_results:
                    key = str(item.get('id', str(item)))
                    if key not in seen:
                        seen.add(key)
                        unique_data.append(item)
                
                df = pd.DataFrame(unique_data)
                st.success(f"‚úÖ {len(df):,}‰ª∂Ë¶ã„Å§„Åã„Çä„Åæ„Åó„Åü")
                st.dataframe(df, use_container_width=True, height=350, hide_index=True)
            else:
                st.warning("ÁµêÊûú„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü")
    
    with tab2:
        st.markdown("### Ë§áÊï∞„ÅÆÊù°‰ª∂„ÅßÊ§úÁ¥¢")
        
        if 'search_conditions' not in st.session_state:
            st.session_state.search_conditions = []
        
        columns = get_table_columns(selected_table)
        
        col1, col2, col3, col4 = st.columns([3, 2, 3, 1])
        with col1:
            cond_col = st.selectbox("„Éï„Ç£„Éº„É´„Éâ", columns, key="sc_col")
        with col2:
            cond_op = st.selectbox("ÊºîÁÆóÂ≠ê", ["Á≠â„Åó„ÅÑ", "Âê´„ÇÄ", "„Çà„ÇäÂ§ß„Åç„ÅÑ", "„Çà„ÇäÂ∞è„Åï„ÅÑ"], key="sc_op")
        with col3:
            cond_val = st.text_input("ÂÄ§", key="sc_val")
        with col4:
            st.write("")
            if st.button("‚ûï"):
                if cond_val:
                    st.session_state.search_conditions.append({
                        'column': cond_col,
                        'operator': cond_op,
                        'value': cond_val
                    })
                    st.rerun()
        
        if st.session_state.search_conditions:
            st.markdown("**Ê§úÁ¥¢Êù°‰ª∂:**")
            for idx, cond in enumerate(st.session_state.search_conditions):
                col1, col2 = st.columns([9, 1])
                with col1:
                    st.info(f"{cond['column']} „Åå {cond['operator']} „Äå{cond['value']}„Äç")
                with col2:
                    if st.button("‚ùå", key=f"del_{idx}"):
                        st.session_state.search_conditions.pop(idx)
                        st.rerun()
            
            if st.button("üîç Ê§úÁ¥¢ÂÆüË°å", type="primary", use_container_width=True, key="adv_search"):
                query = supabase.table(selected_table).select("*")
                
                for cond in st.session_state.search_conditions:
                    col, op, val = cond['column'], cond['operator'], cond['value']
                    
                    if op == "Á≠â„Åó„ÅÑ":
                        query = query.eq(col, val)
                    elif op == "Âê´„ÇÄ":
                        query = query.ilike(col, f"%{val}%")
                    elif op == "„Çà„ÇäÂ§ß„Åç„ÅÑ":
                        query = query.gt(col, val)
                    elif op == "„Çà„ÇäÂ∞è„Åï„ÅÑ":
                        query = query.lt(col, val)
                
                try:
                    response = query.limit(500).execute()
                    if response.data:
                        df = pd.DataFrame(response.data)
                        st.success(f"‚úÖ {len(df):,}‰ª∂Ë¶ã„Å§„Åã„Çä„Åæ„Åó„Åü")
                        st.dataframe(df, use_container_width=True, height=350, hide_index=True)
                    else:
                        st.warning("ÁµêÊûú„Å™„Åó")
                except Exception as e:
                    st.error(f"„Ç®„É©„Éº: {e}")

# ========================================
# üìä ÈõÜË®àÂàÜÊûê
# ========================================
elif page == "üìä ÈõÜË®àÂàÜÊûê":
    st.markdown('<div class="page-title">üìä ÈõÜË®àÂàÜÊûê</div>', unsafe_allow_html=True)
    st.markdown('<div class="page-subtitle">„Éá„Éº„Çø„Çí„Ç∞„É´„Éº„ÉóÂåñ„Åó„Å¶ÈõÜË®à„ÉªÂàÜÊûê</div>', unsafe_allow_html=True)
    
    if not selected_table:
        st.warning("‚ö†Ô∏è „Çµ„Ç§„Éâ„Éê„Éº„Åã„Çâ„ÉÜ„Éº„Éñ„É´„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
        st.stop()
    
    columns = get_table_columns(selected_table)
    valid_columns = [c for c in columns if c not in ['id', 'created_at', 'updated_at']]
    
    st.markdown("### 1Ô∏è‚É£ „Ç∞„É´„Éº„ÉóÂåñ„Åô„ÇãÈ†ÖÁõÆ„ÇíÈÅ∏Êäû")
    st.caption("Âêå„ÅòÂÄ§„Çí„Åæ„Å®„ÇÅ„Å¶ÈõÜË®à„Åó„Åü„ÅÑÈ†ÖÁõÆ„ÇíÈÅ∏„Çì„Åß„Åè„Å†„Åï„ÅÑÔºà‰æãÔºö„Ç´„ÉÜ„Ç¥„É™„Éº„ÄÅÂú∞Âüü„ÄÅÊúà„Å™„Å©Ôºâ")
    group_cols = st.multiselect(
        "„Ç∞„É´„Éº„ÉóÂåñ",
        valid_columns,
        help="Ë§áÊï∞ÈÅ∏ÊäûÂèØËÉΩ„Åß„Åô",
        label_visibility="collapsed"
    )
    
    st.markdown("### 2Ô∏è‚É£ ÈõÜË®àÊñπÊ≥ï„ÇíÈÅ∏Êäû")
    
    col1, col2 = st.columns(2)
    
    with col1:
        calc_type = st.selectbox(
            "Ë®àÁÆóÊñπÊ≥ï",
            ["‰ª∂Êï∞„ÇíÊï∞„Åà„Çã", "ÂêàË®à", "Âπ≥Âùá", "ÊúÄÂ§ßÂÄ§", "ÊúÄÂ∞èÂÄ§"],
            help="„Å©„ÅÆ„Çà„ÅÜ„Å™Ë®àÁÆó„ÇíË°å„ÅÜ„ÅãÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
        )
    
    with col2:
        if calc_type != "‰ª∂Êï∞„ÇíÊï∞„Åà„Çã":
            calc_col = st.selectbox(
                "Ë®àÁÆó„Åô„Çã„Éï„Ç£„Éº„É´„Éâ",
                valid_columns,
                help="Êï∞ÂÄ§„ÅåÂÖ•„Å£„Å¶„ÅÑ„Çã„Éï„Ç£„Éº„É´„Éâ„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
            )
        else:
            calc_col = None
            st.info("„Ç∞„É´„Éº„Éó„Åî„Å®„ÅÆ„É¨„Ç≥„Éº„ÉâÊï∞„Çí„Ç´„Ç¶„É≥„Éà„Åó„Åæ„Åô")
    
    st.markdown("---")
    
    if st.button("üìä ÈõÜË®à„ÇíÂÆüË°å", type="primary", use_container_width=True):
        if not group_cols:
            st.warning("‚ö†Ô∏è „Ç∞„É´„Éº„ÉóÂåñ„Åô„ÇãÈ†ÖÁõÆ„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
        else:
            with st.spinner("ÈõÜË®à‰∏≠..."):
                df = get_table_data(selected_table, 10000)
                
                if df is not None and len(df) > 0:
                    try:
                        if calc_type == "‰ª∂Êï∞„ÇíÊï∞„Åà„Çã":
                            result = df.groupby(group_cols).size().reset_index(name='‰ª∂Êï∞')
                        elif calc_type == "ÂêàË®à":
                            df[calc_col] = pd.to_numeric(df[calc_col], errors='coerce')
                            result = df.groupby(group_cols)[calc_col].sum().reset_index(name=f'{calc_col}_ÂêàË®à')
                        elif calc_type == "Âπ≥Âùá":
                            df[calc_col] = pd.to_numeric(df[calc_col], errors='coerce')
                            result = df.groupby(group_cols)[calc_col].mean().reset_index(name=f'{calc_col}_Âπ≥Âùá')
                        elif calc_type == "ÊúÄÂ§ßÂÄ§":
                            df[calc_col] = pd.to_numeric(df[calc_col], errors='coerce')
                            result = df.groupby(group_cols)[calc_col].max().reset_index(name=f'{calc_col}_ÊúÄÂ§ß')
                        else:
                            df[calc_col] = pd.to_numeric(df[calc_col], errors='coerce')
                            result = df.groupby(group_cols)[calc_col].min().reset_index(name=f'{calc_col}_ÊúÄÂ∞è')
                        
                        st.success(f"‚úÖ {len(result):,}„Ç∞„É´„Éº„Éó„ÅÆÈõÜË®àÁµêÊûú")
                        
                        st.dataframe(result, use_container_width=True, height=400, hide_index=True)
                        
                        csv = result.to_csv(index=False, encoding='utf-8-sig')
                        st.download_button(
                            "üì• CSV„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ",
                            csv,
                            f"{selected_table}_ÈõÜË®à_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                            "text/csv",
                            use_container_width=True
                        )
                        
                        if len(result) <= 50 and len(result) > 0:
                            st.markdown("---")
                            st.markdown("### üìà „Ç∞„É©„ÉïË°®Á§∫")
                            
                            try:
                                chart_data = result.set_index(group_cols[0])
                                
                                col1, col2 = st.columns(2)
                                with col1:
                                    st.markdown("**Ê£í„Ç∞„É©„Éï**")
                                    st.bar_chart(chart_data)
                                with col2:
                                    st.markdown("**Êäò„ÇåÁ∑ö„Ç∞„É©„Éï**")
                                    st.line_chart(chart_data)
                            except Exception as e:
                                st.info("„Ç∞„É©„Éï„ÇíË°®Á§∫„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü")
                                
                    except Exception as e:
                        st.error(f"‚ùå „Ç®„É©„Éº: {e}")
                        st.info("üí° Ë®àÁÆó„Åô„Çã„Éï„Ç£„Éº„É´„Éâ„Å´Êï∞ÂÄ§‰ª•Â§ñ„ÅÆ„Éá„Éº„Çø„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô")
                else:
                    st.warning("„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì")

# ========================================
# üîß SQLÂÆüË°å
# ========================================
elif page == "üîß SQLÂÆüË°å":
    st.markdown('<div class="page-title">üîß SQLÂÆüË°å</div>', unsafe_allow_html=True)
    st.markdown('<div class="page-subtitle">„Ç´„Çπ„Çø„É†SQL„ÇØ„Ç®„É™„ÇíÂÆüË°å</div>', unsafe_allow_html=True)
    
    st.warning("‚ö†Ô∏è SELECTÊñá„ÅÆ„ÅøÂÆüË°å„Åß„Åç„Åæ„Åô„ÄÇINSERT/UPDATE/DELETE„ÅØ„Äå„Éá„Éº„ÇøÁÆ°ÁêÜ„Äç„Éö„Éº„Ç∏„Çí‰ΩøÁî®„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
    
    tab1, tab2, tab3 = st.tabs(["üìù „ÇØ„Ç®„É™ÂÆüË°å", "üìö „ÇØ„Ç®„É™‰æã", "üí° „Éí„É≥„Éà"])
    
    with tab1:
        st.markdown("### SQL„ÇØ„Ç®„É™„ÇíÂÖ•Âäõ")
        
        if 'sql_query' not in st.session_state:
            st.session_state.sql_query = ""
        
        sql_query = st.text_area(
            "SQL„ÇØ„Ç®„É™",
            value=st.session_state.sql_query,
            height=200,
            placeholder="‰æã: SELECT * FROM users WHERE age > 20 ORDER BY created_at DESC LIMIT 10",
            help="SELECTÊñá„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
        )
        
        col1, col2, col3 = st.columns([2, 2, 1])
        
        with col1:
            if st.button("‚ñ∂Ô∏è „ÇØ„Ç®„É™„ÇíÂÆüË°å", type="primary", use_container_width=True):
                if sql_query.strip():
                    # SELECTÊñá„ÅÆ„ÅøË®±ÂèØ
                    if not sql_query.strip().upper().startswith('SELECT'):
                        st.error("‚ùå SELECTÊñá„ÅÆ„ÅøÂÆüË°å„Åß„Åç„Åæ„Åô")
                    else:
                        try:
                            with st.spinner("„ÇØ„Ç®„É™„ÇíÂÆüË°å‰∏≠..."):
                                import psycopg2
                                conn = psycopg2.connect(DATABASE_URL)
                                cur = conn.cursor()
                                cur.execute(sql_query)
                                
                                # ÁµêÊûú„ÇíÂèñÂæó
                                rows = cur.fetchall()
                                colnames = [desc[0] for desc in cur.description]
                                
                                cur.close()
                                conn.close()
                                
                                if rows:
                                    df_result = pd.DataFrame(rows, columns=colnames)
                                    st.success(f"‚úÖ {len(df_result):,}‰ª∂„ÅÆ„É¨„Ç≥„Éº„Éâ„ÇíÂèñÂæó„Åó„Åæ„Åó„Åü")
                                    st.dataframe(df_result, use_container_width=True, height=400, hide_index=True)
                                    
                                    # CSV„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
                                    csv = df_result.to_csv(index=False, encoding='utf-8-sig')
                                    st.download_button(
                                        "üì• CSV„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ",
                                        csv,
                                        f"query_result_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                                        "text/csv",
                                        use_container_width=True
                                    )
                                else:
                                    st.info("ÁµêÊûú„Åå0‰ª∂„Åß„Åó„Åü")
                                    
                        except ImportError:
                            st.error("‚ùå psycopg2„Åå„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì")
                            st.code("pip install psycopg2-binary")
                        except Exception as e:
                            st.error(f"‚ùå „Ç®„É©„Éº: {e}")
                else:
                    st.warning("‚ö†Ô∏è SQL„ÇØ„Ç®„É™„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
        
        with col2:
            if st.button("üóëÔ∏è „ÇØ„É™„Ç¢", use_container_width=True):
                st.session_state.sql_query = ""
                st.rerun()
        
        with col3:
            pass
    
    with tab2:
        st.markdown("### „Çà„Åè‰Ωø„ÅÜ„ÇØ„Ç®„É™„ÅÆ‰æã")
        
        st.markdown("#### Âü∫Êú¨ÁöÑ„Å™SELECT")
        query_examples = {
            "ÂÖ®„Éá„Éº„ÇøÂèñÂæó": "SELECT * FROM „ÉÜ„Éº„Éñ„É´Âêç LIMIT 100",
            "ÁâπÂÆö„Ç´„É©„É†„ÅÆ„Åø": "SELECT id, name, email FROM users",
            "Êù°‰ª∂‰ªò„ÅçÊ§úÁ¥¢": "SELECT * FROM products WHERE price > 1000",
            "‰∏¶„Å≥Êõø„Åà": "SELECT * FROM orders ORDER BY created_at DESC",
            "‰ª∂Êï∞Âà∂Èôê": "SELECT * FROM customers LIMIT 10",
        }
        
        for title, query in query_examples.items():
            with st.expander(f"üìå {title}"):
                st.code(query, language="sql")
                if st.button(f"„Åì„ÅÆ„ÇØ„Ç®„É™„Çí‰Ωø„ÅÜ", key=f"use_{title}"):
                    st.session_state.sql_query = query
                    st.rerun()
        
        st.markdown("---")
        st.markdown("#### ÈõÜË®à„ÇØ„Ç®„É™")
        
        aggregate_examples = {
            "‰ª∂Êï∞„Ç´„Ç¶„É≥„Éà": "SELECT COUNT(*) as ‰ª∂Êï∞ FROM users",
            "„Ç∞„É´„Éº„ÉóÂåñ": "SELECT category, COUNT(*) as ‰ª∂Êï∞ FROM products GROUP BY category",
            "ÂêàË®à": "SELECT SUM(price) as ÂêàË®àÈáëÈ°ç FROM orders",
            "Âπ≥Âùá": "SELECT AVG(age) as Âπ≥ÂùáÂπ¥ÈΩ¢ FROM users WHERE age IS NOT NULL",
            "ÊúÄÂ§ß„ÉªÊúÄÂ∞è": "SELECT MAX(price) as ÊúÄÈ´òÈ°ç, MIN(price) as ÊúÄ‰ΩéÈ°ç FROM products",
        }
        
        for title, query in aggregate_examples.items():
            with st.expander(f"üìä {title}"):
                st.code(query, language="sql")
                if st.button(f"„Åì„ÅÆ„ÇØ„Ç®„É™„Çí‰Ωø„ÅÜ", key=f"use_agg_{title}"):
                    st.session_state.sql_query = query
                    st.rerun()
        
        st.markdown("---")
        st.markdown("#### JOINÔºàÁµêÂêàÔºâ")
        
        join_examples = {
            "INNER JOIN": """SELECT 
    orders.id, 
    orders.order_number, 
    customers.name as customer_name
FROM orders
INNER JOIN customers ON orders.customer_id = customers.id
LIMIT 100""",
            "LEFT JOIN": """SELECT 
    products.name, 
    categories.name as category_name
FROM products
LEFT JOIN categories ON products.category_id = categories.id""",
            "Ë§áÊï∞ÁµêÂêà": """SELECT 
    orders.order_number,
    customers.name as customer_name,
    products.name as product_name
FROM orders
INNER JOIN customers ON orders.customer_id = customers.id
INNER JOIN products ON orders.product_id = products.id"""
        }
        
        for title, query in join_examples.items():
            with st.expander(f"üîó {title}"):
                st.code(query, language="sql")
                if st.button(f"„Åì„ÅÆ„ÇØ„Ç®„É™„Çí‰Ωø„ÅÜ", key=f"use_join_{title}"):
                    st.session_state.sql_query = query
                    st.rerun()
    
    with tab3:
        st.markdown("### üí° SQL„ÇØ„Ç®„É™„ÅÆ„Éí„É≥„Éà")
        
        st.markdown("""
        #### Âü∫Êú¨ÊßãÊñá
        ```sql
        SELECT „Ç´„É©„É†Âêç
        FROM „ÉÜ„Éº„Éñ„É´Âêç
        WHERE Êù°‰ª∂
        ORDER BY ‰∏¶„Å≥È†Ü
        LIMIT ‰ª∂Êï∞
        ```
        
        #### WHEREÂè•„ÅÆÊù°‰ª∂
        - **Á≠â„Åó„ÅÑ**: `WHERE name = 'Â§™ÈÉé'`
        - **Âê´„ÇÄ**: `WHERE name LIKE '%Â§™ÈÉé%'`
        - **‰ª•‰∏ä/‰ª•‰∏ã**: `WHERE age >= 20`
        - **NULLÂà§ÂÆö**: `WHERE email IS NULL`
        - **Ë§áÊï∞Êù°‰ª∂**: `WHERE age > 20 AND city = 'Êù±‰∫¨'`
        - **ORÊù°‰ª∂**: `WHERE city = 'Êù±‰∫¨' OR city = 'Â§ßÈò™'`
        
        #### ORDER BYÔºà‰∏¶„Å≥Êõø„ÅàÔºâ
        - **ÊòáÈ†Ü**: `ORDER BY created_at ASC`
        - **ÈôçÈ†Ü**: `ORDER BY created_at DESC`
        - **Ë§áÊï∞**: `ORDER BY category, price DESC`
        
        #### ÈõÜË®àÈñ¢Êï∞
        - **COUNT()**: ‰ª∂Êï∞„ÇíÊï∞„Åà„Çã
        - **SUM()**: ÂêàË®à
        - **AVG()**: Âπ≥Âùá
        - **MAX()**: ÊúÄÂ§ßÂÄ§
        - **MIN()**: ÊúÄÂ∞èÂÄ§
        
        #### GROUP BYÔºà„Ç∞„É´„Éº„ÉóÂåñÔºâ
        ```sql
        SELECT category, COUNT(*) as ‰ª∂Êï∞, AVG(price) as Âπ≥Âùá‰æ°Ê†º
        FROM products
        GROUP BY category
        ```
        
        #### Êó•‰ªò„ÅÆÊ§úÁ¥¢
        - **‰ªäÊó•**: `WHERE DATE(created_at) = CURRENT_DATE`
        - **ÁØÑÂõ≤**: `WHERE created_at BETWEEN '2025-01-01' AND '2025-12-31'`
        - **‰ªäÊúà**: `WHERE EXTRACT(MONTH FROM created_at) = EXTRACT(MONTH FROM CURRENT_DATE)`
        
        #### „Éë„Éï„Ç©„Éº„Éû„É≥„Çπ
        - Â§ßÈáè„Éá„Éº„Çø„ÇíÊâ±„ÅÜÂ†¥Âêà„ÅØÂøÖ„Åö `LIMIT` „ÇíÊåáÂÆö
        - „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„ÅåË®≠ÂÆö„Åï„Çå„Åü„Ç´„É©„É†„ÅßÊ§úÁ¥¢
        - ÂøÖË¶Å„Å™„Ç´„É©„É†„ÅÆ„ÅøÂèñÂæóÔºà`SELECT *` „ÇíÈÅø„Åë„ÇãÔºâ
        """)
        
        st.markdown("---")
        
        st.info("""
        **üí° „ÉÜ„Éº„Éñ„É´‰∏ÄË¶ß„Å®„Ç´„É©„É†„ÇíÁ¢∫Ë™ç„Åô„ÇãÊñπÊ≥ï**
        
        „Çµ„Ç§„Éâ„Éê„Éº„ÅÆ„Äåüìã „ÉÜ„Éº„Éñ„É´‰∏ÄË¶ß„Äç„Åß„ÉÜ„Éº„Éñ„É´Âêç„ÇíÁ¢∫Ë™ç„Åß„Åç„Åæ„Åô„ÄÇ
        ÂêÑ„ÉÜ„Éº„Éñ„É´„ÅÆ„Ç´„É©„É†„ÅØ„Äåüìã „Éá„Éº„ÇøÁÆ°ÁêÜ„Äç„Çø„Éñ„ÅÆ„Äå‰∏ÄË¶ß„Äç„ÅßÁ¢∫Ë™ç„Åß„Åç„Åæ„Åô„ÄÇ
        """)
